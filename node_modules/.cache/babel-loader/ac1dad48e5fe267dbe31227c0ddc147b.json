{"ast":null,"code":"var _jsxFileName = \"/Users/ekaterinapavlova/PycharmProjects/onix/autoSea/src/components/FFmpeg.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg'; // import { InferenceSession, Tensor } from 'onnxruntime-web';\n// const ort = require('onnxruntime-react-native');\n// import onLoadImage from './ImagePrediction';\n\nimport handleImage, { getImageTensorFromPath } from './ImagePrediction';\nimport { data as classes } from \"./imagenet_classes.json\";\nimport fs from \"fs\";\nimport { InferenceSession, Tensor } from \"onnxruntime-web\"; // import {\n//   warmupModel,\n//   getTensorFromCanvasContext,\n//   setContextFromTensor,\n//   tensorToCanvas,\n//   canvasToTensor\n// } from \"./onnx/utils\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet inferenceSession;\nconst MODEL_URL = \"./model.onnx\";\nconst IMAGE_SIZE = 250;\nlet ffmpeg = null;\nconst useStyles = makeStyles({\n  root: {\n    margin: '48px 0px 48px 0px'\n  },\n  progress: {\n    width: '100%'\n  }\n});\n\nconst readFromBlobOrFile = blob => new Promise((resolve, reject) => {\n  const fileReader = new FileReader();\n\n  fileReader.onload = () => {\n    resolve(fileReader.result);\n  };\n\n  fileReader.onerror = _ref => {\n    let {\n      target: {\n        error: {\n          code\n        }\n      }\n    } = _ref;\n    reject(Error(`File could not be read! Code=${code}`));\n  };\n\n  fileReader.readAsArrayBuffer(blob);\n});\n\nfunction CircularProgressWithLabel(props) {\n  return /*#__PURE__*/_jsxDEV(Box, {\n    position: \"relative\",\n    display: \"inline-flex\",\n    children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n      variant: \"static\",\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      top: 0,\n      left: 0,\n      bottom: 0,\n      right: 0,\n      position: \"absolute\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"caption\",\n        component: \"div\",\n        color: \"textSecondary\",\n        children: `${Math.round(props.value)}%`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_c = CircularProgressWithLabel;\n\nfunction FFmpeg(_ref2) {\n  _s();\n\n  let {\n    args,\n    inFilename,\n    outFilename,\n    mediaType\n  } = _ref2;\n  const classes = useStyles();\n  const [videoSrc, setVideoSrc] = useState('');\n  const [progress, setProgress] = useState(0);\n  const [message, setMessage] = useState('');\n  useEffect(() => {\n    if (ffmpeg === null) {\n      ffmpeg = createFFmpeg({\n        log: true,\n        corePath: './static/js/ffmpeg-core.js' // corePath: 'https://unpkg.com/@ffmpeg/core@0.8.3/dist/ffmpeg-core.js',\n\n      });\n    }\n\n    ffmpeg.setLogger(_ref3 => {\n      let {\n        type,\n        message\n      } = _ref3;\n\n      if (type !== 'info') {\n        setMessage(message);\n      }\n    });\n    ffmpeg.setProgress(_ref4 => {\n      let {\n        ratio\n      } = _ref4;\n\n      if (ratio >= 0 && ratio <= 1) {\n        setProgress(ratio * 100);\n      }\n\n      if (ratio === 1) {\n        setTimeout(() => {\n          setProgress(0);\n        }, 1000);\n      }\n    });\n  });\n\n  const onFileUploaded = async _ref5 => {\n    let {\n      target: {\n        files\n      }\n    } = _ref5;\n    const file = new Uint8Array(await readFromBlobOrFile(files[0]));\n    var today = Math.round(new Date().getTime() / 1000);\n    var dirName = files[0]['name'].replace('.', '_') + '_' + today.toString();\n    setMessage('Loading FFmpeg.wasm');\n\n    if (!ffmpeg.isLoaded()) {\n      setMessage('Loading ffmpeg.wasm-core, may take few minutes');\n      await ffmpeg.load();\n    }\n\n    ffmpeg.FS('writeFile', files[0]['name'], await fetchFile(file));\n    setMessage('Start to run command');\n    const start = Date.now();\n    await ffmpeg.FS(\"mkdir\", dirName);\n    var videoName = files[0]['name'];\n    await ffmpeg.run('-i', videoName, '-vf', 'crop=in_w:in_h-200,scale=960:-1', '-r', '1', dirName + '/%04d.png', '-fflags', 'discardcorrupt');\n    const listDir1 = ffmpeg.FS(\"readdir\", '.');\n    console.log(listDir1);\n    const listDir = ffmpeg.FS(\"readdir\", dirName);\n    console.log(listDir);\n    const modelFile = `./static/js/my_classification.onnx`;\n    console.log(\"loading onnx model\");\n    console.log(modelFile);\n    const session = await InferenceSession.create(modelFile, {\n      executionProviders: ['wasm']\n    });\n\n    for (let i = 2; i < listDir.length; i++) {\n      const data = ffmpeg.FS('readFile', dirName + '/' + listDir[i]);\n      setVideoSrc(URL.createObjectURL(new Blob([data.buffer], {\n        type: 'image/png'\n      }))); // var fileReader = new FileReader();\n      // fileReader.readAsDataURL(new Blob([data.buffer]));\n\n      const myImg = document.getElementById('input-image');\n      myImg.src = URL.createObjectURL(new Blob([data.buffer], {\n        type: 'image/png'\n      })); // myImg.onload = () => handleImage(myImg);\n\n      var res = handleImage(myImg, session); //WTF PROMISE???????\n      // var res = run(myTensor);\n\n      console.log('aaaaaaaaaaaaaaaaaa', res);\n      console.log(res);\n    }\n\n    ;\n    setMessage(`Done in ${Date.now() - start} ms`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    className: classes.root,\n    container: true,\n    direction: \"column\",\n    alignItems: \"center\",\n    spacing: 2,\n    children: [videoSrc.length === 0 ? null : /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: videoSrc,\n        id: \"input-image\",\n        className: \"input-image img-fluid rounded mx-auto d-block\",\n        alt: \"Input image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this), \",\", /*#__PURE__*/_jsxDEV(\"handleImage\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      children: progress !== 0 ? /*#__PURE__*/_jsxDEV(CircularProgressWithLabel, {\n        variant: \"static\",\n        color: \"secondary\",\n        value: progress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        component: \"label\",\n        color: \"secondary\",\n        children: [\"Upload a Video/Audio File\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          style: {\n            display: 'none'\n          },\n          onChange: onFileUploaded\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"center\",\n        children: `$ ffmpeg ${args.join(' ')}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"center\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FFmpeg, \"BrFKtYid+DWZEpJ4I4fRqlCHIMU=\", false, function () {\n  return [useStyles];\n});\n\n_c2 = FFmpeg;\nexport default FFmpeg;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CircularProgressWithLabel\");\n$RefreshReg$(_c2, \"FFmpeg\");","map":{"version":3,"names":["React","useState","useEffect","Grid","CircularProgress","Box","Button","Typography","makeStyles","createFFmpeg","fetchFile","handleImage","getImageTensorFromPath","data","classes","fs","InferenceSession","Tensor","inferenceSession","MODEL_URL","IMAGE_SIZE","ffmpeg","useStyles","root","margin","progress","width","readFromBlobOrFile","blob","Promise","resolve","reject","fileReader","FileReader","onload","result","onerror","target","error","code","Error","readAsArrayBuffer","CircularProgressWithLabel","props","Math","round","value","FFmpeg","args","inFilename","outFilename","mediaType","videoSrc","setVideoSrc","setProgress","message","setMessage","log","corePath","setLogger","type","ratio","setTimeout","onFileUploaded","files","file","Uint8Array","today","Date","getTime","dirName","replace","toString","isLoaded","load","FS","start","now","videoName","run","listDir1","console","listDir","modelFile","session","create","executionProviders","i","length","URL","createObjectURL","Blob","buffer","myImg","document","getElementById","src","res","display","join"],"sources":["/Users/ekaterinapavlova/PycharmProjects/onix/autoSea/src/components/FFmpeg.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg';\n// import { InferenceSession, Tensor } from 'onnxruntime-web';\n// const ort = require('onnxruntime-react-native');\n// import onLoadImage from './ImagePrediction';\nimport handleImage, {getImageTensorFromPath} from './ImagePrediction';\nimport {data as classes} from \"./imagenet_classes.json\";\n\nimport fs from \"fs\";\nimport { InferenceSession, Tensor } from \"onnxruntime-web\";\n\n\n// import {\n//   warmupModel,\n//   getTensorFromCanvasContext,\n//   setContextFromTensor,\n//   tensorToCanvas,\n//   canvasToTensor\n// } from \"./onnx/utils\";\n\nlet inferenceSession;\n\nconst MODEL_URL = \"./model.onnx\";\nconst IMAGE_SIZE = 250;\n\nlet ffmpeg = null;\n\n\nconst useStyles = makeStyles({\n  root: {\n    margin: '48px 0px 48px 0px',\n  },\n  progress: {\n    width: '100%',\n  },\n});\n\nconst readFromBlobOrFile = (blob) => (\n  new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      resolve(fileReader.result);\n    };\n    fileReader.onerror = ({ target: { error: { code } } }) => {\n      reject(Error(`File could not be read! Code=${code}`));\n    };\n    fileReader.readAsArrayBuffer(blob);\n  })\n);\n\nfunction CircularProgressWithLabel(props) {\n  return (\n    <Box position=\"relative\" display=\"inline-flex\">\n      <CircularProgress variant=\"static\" {...props} />\n      <Box\n        top={0}\n        left={0}\n        bottom={0}\n        right={0}\n        position=\"absolute\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n      >\n        <Typography variant=\"caption\" component=\"div\" color=\"textSecondary\">{`${Math.round(\n          props.value,\n        )}%`}</Typography>\n      </Box>\n    </Box>\n  );\n}\n\nfunction FFmpeg({ args, inFilename, outFilename, mediaType }) {\n  const classes = useStyles();\n  const [videoSrc, setVideoSrc] = useState('');\n  const [progress, setProgress] = useState(0);\n  const [message, setMessage] = useState('');\n  useEffect(() => {\n    if (ffmpeg === null) {\n      ffmpeg = createFFmpeg({\n        log: true,\n        corePath: './static/js/ffmpeg-core.js',\n        // corePath: 'https://unpkg.com/@ffmpeg/core@0.8.3/dist/ffmpeg-core.js',\n      });\n    }\n    ffmpeg.setLogger(({ type, message }) => {\n      if (type !== 'info') {\n        setMessage(message);\n      }\n    });\n    ffmpeg.setProgress(({ ratio }) => {\n      if (ratio >= 0 && ratio <= 1) {\n        setProgress(ratio * 100);\n      }\n      if (ratio === 1) {\n        setTimeout(() => { setProgress(0); }, 1000);\n      }\n    });\n  });\n\n\n\n  const onFileUploaded = async ({ target: { files } }) => {\n    const file = new Uint8Array(await readFromBlobOrFile(files[0]));\n    var today = Math.round((new Date()).getTime() / 1000);\n    var dirName = files[0]['name'].replace('.', '_') + '_' + today.toString();\n\n    setMessage('Loading FFmpeg.wasm');\n    if (!ffmpeg.isLoaded()) {\n      setMessage('Loading ffmpeg.wasm-core, may take few minutes');\n      await ffmpeg.load();\n    }\n    ffmpeg.FS('writeFile', files[0]['name'], await fetchFile(file));\n    setMessage('Start to run command');\n    const start = Date.now();\n    await ffmpeg.FS(\"mkdir\", dirName);\n    var videoName = files[0]['name'];\n    await ffmpeg.run('-i', videoName, '-vf', 'crop=in_w:in_h-200,scale=960:-1', '-r', '1', dirName + '/%04d.png', '-fflags', 'discardcorrupt');\n\n\n\n    const listDir1 = ffmpeg.FS(\"readdir\", '.');\n    console.log(listDir1);\n    const listDir = ffmpeg.FS(\"readdir\", dirName);\n    console.log(listDir);\n\n\n    const modelFile = `./static/js/my_classification.onnx`;\n    console.log(\"loading onnx model\");\n    console.log(modelFile);\n\n\n    const session = await InferenceSession.create(modelFile,{executionProviders: ['wasm']});\n\n    for (let i = 2; i < listDir.length; i++) {\n\n\n    const data = ffmpeg.FS('readFile', dirName + '/' + listDir[i]);\n\n\n    setVideoSrc(URL.createObjectURL(new Blob([data.buffer], {type: 'image/png'})));\n\n    // var fileReader = new FileReader();\n    // fileReader.readAsDataURL(new Blob([data.buffer]));\n    const myImg = document.getElementById('input-image');\n    myImg.src = URL.createObjectURL(new Blob([data.buffer], {type: 'image/png'}));\n    // myImg.onload = () => handleImage(myImg);\n    var res =  handleImage(myImg,session);//WTF PROMISE???????\n    // var res = run(myTensor);\n    console.log('aaaaaaaaaaaaaaaaaa', res);\n    console.log(res);\n\n\n  };\n    setMessage(`Done in ${Date.now() - start} ms`);\n\n  };\n  return (\n\n\n\n    <Grid className={classes.root} container direction=\"column\" alignItems=\"center\" spacing={2}>\n      {videoSrc.length === 0 ? null : (\n        <Grid item>\n          <img src={videoSrc} id=\"input-image\"\n               className=\"input-image img-fluid rounded mx-auto d-block\" alt=\"Input image\"></img>,\n          < handleImage />\n\n\n        </Grid>\n      )}\n      <Grid item>\n        {progress !== 0 ? (\n          <CircularProgressWithLabel\n            variant=\"static\"\n            color=\"secondary\"\n            value={progress}\n          />\n        ) : (\n          <Button\n            variant=\"contained\"\n            component=\"label\"\n            color=\"secondary\"\n          >\n            Upload a Video/Audio File\n            <input\n              type=\"file\"\n              style={{ display: 'none' }}\n              onChange={onFileUploaded}\n            />\n          </Button>\n        )}\n      </Grid>\n      <Grid item>\n        <Typography align=\"center\">\n          {`$ ffmpeg ${args.join(' ')}`}\n        </Typography>\n      </Grid>\n      <Grid item>\n        <Typography align=\"center\">\n          {message}\n        </Typography>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default FFmpeg;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,YAAT,EAAuBC,SAAvB,QAAwC,gBAAxC,C,CACA;AACA;AACA;;AACA,OAAOC,WAAP,IAAqBC,sBAArB,QAAkD,mBAAlD;AACA,SAAQC,IAAI,IAAIC,OAAhB,QAA8B,yBAA9B;AAEA,OAAOC,EAAP,MAAe,IAAf;AACA,SAASC,gBAAT,EAA2BC,MAA3B,QAAyC,iBAAzC,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,IAAIC,gBAAJ;AAEA,MAAMC,SAAS,GAAG,cAAlB;AACA,MAAMC,UAAU,GAAG,GAAnB;AAEA,IAAIC,MAAM,GAAG,IAAb;AAGA,MAAMC,SAAS,GAAGd,UAAU,CAAC;EAC3Be,IAAI,EAAE;IACJC,MAAM,EAAE;EADJ,CADqB;EAI3BC,QAAQ,EAAE;IACRC,KAAK,EAAE;EADC;AAJiB,CAAD,CAA5B;;AASA,MAAMC,kBAAkB,GAAIC,IAAD,IACzB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;EAC/B,MAAMC,UAAU,GAAG,IAAIC,UAAJ,EAAnB;;EACAD,UAAU,CAACE,MAAX,GAAoB,MAAM;IACxBJ,OAAO,CAACE,UAAU,CAACG,MAAZ,CAAP;EACD,CAFD;;EAGAH,UAAU,CAACI,OAAX,GAAqB,QAAqC;IAAA,IAApC;MAAEC,MAAM,EAAE;QAAEC,KAAK,EAAE;UAAEC;QAAF;MAAT;IAAV,CAAoC;IACxDR,MAAM,CAACS,KAAK,CAAE,gCAA+BD,IAAK,EAAtC,CAAN,CAAN;EACD,CAFD;;EAGAP,UAAU,CAACS,iBAAX,CAA6Bb,IAA7B;AACD,CATD,CADF;;AAaA,SAASc,yBAAT,CAAmCC,KAAnC,EAA0C;EACxC,oBACE,QAAC,GAAD;IAAK,QAAQ,EAAC,UAAd;IAAyB,OAAO,EAAC,aAAjC;IAAA,wBACE,QAAC,gBAAD;MAAkB,OAAO,EAAC,QAA1B;MAAA,GAAuCA;IAAvC;MAAA;MAAA;MAAA;IAAA,QADF,eAEE,QAAC,GAAD;MACE,GAAG,EAAE,CADP;MAEE,IAAI,EAAE,CAFR;MAGE,MAAM,EAAE,CAHV;MAIE,KAAK,EAAE,CAJT;MAKE,QAAQ,EAAC,UALX;MAME,OAAO,EAAC,MANV;MAOE,UAAU,EAAC,QAPb;MAQE,cAAc,EAAC,QARjB;MAAA,uBAUE,QAAC,UAAD;QAAY,OAAO,EAAC,SAApB;QAA8B,SAAS,EAAC,KAAxC;QAA8C,KAAK,EAAC,eAApD;QAAA,UAAsE,GAAEC,IAAI,CAACC,KAAL,CACtEF,KAAK,CAACG,KADgE,CAEtE;MAFF;QAAA;QAAA;QAAA;MAAA;IAVF;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAmBD;;KApBQJ,yB;;AAsBT,SAASK,MAAT,QAA8D;EAAA;;EAAA,IAA9C;IAAEC,IAAF;IAAQC,UAAR;IAAoBC,WAApB;IAAiCC;EAAjC,CAA8C;EAC5D,MAAMrC,OAAO,GAAGQ,SAAS,EAAzB;EACA,MAAM,CAAC8B,QAAD,EAAWC,WAAX,IAA0BpD,QAAQ,CAAC,EAAD,CAAxC;EACA,MAAM,CAACwB,QAAD,EAAW6B,WAAX,IAA0BrD,QAAQ,CAAC,CAAD,CAAxC;EACA,MAAM,CAACsD,OAAD,EAAUC,UAAV,IAAwBvD,QAAQ,CAAC,EAAD,CAAtC;EACAC,SAAS,CAAC,MAAM;IACd,IAAImB,MAAM,KAAK,IAAf,EAAqB;MACnBA,MAAM,GAAGZ,YAAY,CAAC;QACpBgD,GAAG,EAAE,IADe;QAEpBC,QAAQ,EAAE,4BAFU,CAGpB;;MAHoB,CAAD,CAArB;IAKD;;IACDrC,MAAM,CAACsC,SAAP,CAAiB,SAAuB;MAAA,IAAtB;QAAEC,IAAF;QAAQL;MAAR,CAAsB;;MACtC,IAAIK,IAAI,KAAK,MAAb,EAAqB;QACnBJ,UAAU,CAACD,OAAD,CAAV;MACD;IACF,CAJD;IAKAlC,MAAM,CAACiC,WAAP,CAAmB,SAAe;MAAA,IAAd;QAAEO;MAAF,CAAc;;MAChC,IAAIA,KAAK,IAAI,CAAT,IAAcA,KAAK,IAAI,CAA3B,EAA8B;QAC5BP,WAAW,CAACO,KAAK,GAAG,GAAT,CAAX;MACD;;MACD,IAAIA,KAAK,KAAK,CAAd,EAAiB;QACfC,UAAU,CAAC,MAAM;UAAER,WAAW,CAAC,CAAD,CAAX;QAAiB,CAA1B,EAA4B,IAA5B,CAAV;MACD;IACF,CAPD;EAQD,CArBQ,CAAT;;EAyBA,MAAMS,cAAc,GAAG,eAAiC;IAAA,IAA1B;MAAE1B,MAAM,EAAE;QAAE2B;MAAF;IAAV,CAA0B;IACtD,MAAMC,IAAI,GAAG,IAAIC,UAAJ,CAAe,MAAMvC,kBAAkB,CAACqC,KAAK,CAAC,CAAD,CAAN,CAAvC,CAAb;IACA,IAAIG,KAAK,GAAGvB,IAAI,CAACC,KAAL,CAAY,IAAIuB,IAAJ,EAAD,CAAaC,OAAb,KAAyB,IAApC,CAAZ;IACA,IAAIC,OAAO,GAAGN,KAAK,CAAC,CAAD,CAAL,CAAS,MAAT,EAAiBO,OAAjB,CAAyB,GAAzB,EAA8B,GAA9B,IAAqC,GAArC,GAA2CJ,KAAK,CAACK,QAAN,EAAzD;IAEAhB,UAAU,CAAC,qBAAD,CAAV;;IACA,IAAI,CAACnC,MAAM,CAACoD,QAAP,EAAL,EAAwB;MACtBjB,UAAU,CAAC,gDAAD,CAAV;MACA,MAAMnC,MAAM,CAACqD,IAAP,EAAN;IACD;;IACDrD,MAAM,CAACsD,EAAP,CAAU,WAAV,EAAuBX,KAAK,CAAC,CAAD,CAAL,CAAS,MAAT,CAAvB,EAAyC,MAAMtD,SAAS,CAACuD,IAAD,CAAxD;IACAT,UAAU,CAAC,sBAAD,CAAV;IACA,MAAMoB,KAAK,GAAGR,IAAI,CAACS,GAAL,EAAd;IACA,MAAMxD,MAAM,CAACsD,EAAP,CAAU,OAAV,EAAmBL,OAAnB,CAAN;IACA,IAAIQ,SAAS,GAAGd,KAAK,CAAC,CAAD,CAAL,CAAS,MAAT,CAAhB;IACA,MAAM3C,MAAM,CAAC0D,GAAP,CAAW,IAAX,EAAiBD,SAAjB,EAA4B,KAA5B,EAAmC,iCAAnC,EAAsE,IAAtE,EAA4E,GAA5E,EAAiFR,OAAO,GAAG,WAA3F,EAAwG,SAAxG,EAAmH,gBAAnH,CAAN;IAIA,MAAMU,QAAQ,GAAG3D,MAAM,CAACsD,EAAP,CAAU,SAAV,EAAqB,GAArB,CAAjB;IACAM,OAAO,CAACxB,GAAR,CAAYuB,QAAZ;IACA,MAAME,OAAO,GAAG7D,MAAM,CAACsD,EAAP,CAAU,SAAV,EAAqBL,OAArB,CAAhB;IACAW,OAAO,CAACxB,GAAR,CAAYyB,OAAZ;IAGA,MAAMC,SAAS,GAAI,oCAAnB;IACAF,OAAO,CAACxB,GAAR,CAAY,oBAAZ;IACAwB,OAAO,CAACxB,GAAR,CAAY0B,SAAZ;IAGA,MAAMC,OAAO,GAAG,MAAMpE,gBAAgB,CAACqE,MAAjB,CAAwBF,SAAxB,EAAkC;MAACG,kBAAkB,EAAE,CAAC,MAAD;IAArB,CAAlC,CAAtB;;IAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,OAAO,CAACM,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;MAGzC,MAAM1E,IAAI,GAAGQ,MAAM,CAACsD,EAAP,CAAU,UAAV,EAAsBL,OAAO,GAAG,GAAV,GAAgBY,OAAO,CAACK,CAAD,CAA7C,CAAb;MAGAlC,WAAW,CAACoC,GAAG,CAACC,eAAJ,CAAoB,IAAIC,IAAJ,CAAS,CAAC9E,IAAI,CAAC+E,MAAN,CAAT,EAAwB;QAAChC,IAAI,EAAE;MAAP,CAAxB,CAApB,CAAD,CAAX,CANyC,CAQzC;MACA;;MACA,MAAMiC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAAd;MACAF,KAAK,CAACG,GAAN,GAAYP,GAAG,CAACC,eAAJ,CAAoB,IAAIC,IAAJ,CAAS,CAAC9E,IAAI,CAAC+E,MAAN,CAAT,EAAwB;QAAChC,IAAI,EAAE;MAAP,CAAxB,CAApB,CAAZ,CAXyC,CAYzC;;MACA,IAAIqC,GAAG,GAAItF,WAAW,CAACkF,KAAD,EAAOT,OAAP,CAAtB,CAbyC,CAaH;MACtC;;MACAH,OAAO,CAACxB,GAAR,CAAY,oBAAZ,EAAkCwC,GAAlC;MACAhB,OAAO,CAACxB,GAAR,CAAYwC,GAAZ;IAGD;;IAAA;IACCzC,UAAU,CAAE,WAAUY,IAAI,CAACS,GAAL,KAAaD,KAAM,KAA/B,CAAV;EAED,CAtDD;;EAuDA,oBAIE,QAAC,IAAD;IAAM,SAAS,EAAE9D,OAAO,CAACS,IAAzB;IAA+B,SAAS,MAAxC;IAAyC,SAAS,EAAC,QAAnD;IAA4D,UAAU,EAAC,QAAvE;IAAgF,OAAO,EAAE,CAAzF;IAAA,WACG6B,QAAQ,CAACoC,MAAT,KAAoB,CAApB,GAAwB,IAAxB,gBACC,QAAC,IAAD;MAAM,IAAI,MAAV;MAAA,wBACE;QAAK,GAAG,EAAEpC,QAAV;QAAoB,EAAE,EAAC,aAAvB;QACK,SAAS,EAAC,+CADf;QAC+D,GAAG,EAAC;MADnE;QAAA;QAAA;QAAA;MAAA,QADF,oBAGE;QAAA;QAAA;QAAA;MAAA,QAHF;IAAA;MAAA;MAAA;MAAA;IAAA,QAFJ,eAUE,QAAC,IAAD;MAAM,IAAI,MAAV;MAAA,UACG3B,QAAQ,KAAK,CAAb,gBACC,QAAC,yBAAD;QACE,OAAO,EAAC,QADV;QAEE,KAAK,EAAC,WAFR;QAGE,KAAK,EAAEA;MAHT;QAAA;QAAA;QAAA;MAAA,QADD,gBAOC,QAAC,MAAD;QACE,OAAO,EAAC,WADV;QAEE,SAAS,EAAC,OAFZ;QAGE,KAAK,EAAC,WAHR;QAAA,qDAME;UACE,IAAI,EAAC,MADP;UAEE,KAAK,EAAE;YAAEyE,OAAO,EAAE;UAAX,CAFT;UAGE,QAAQ,EAAEnC;QAHZ;UAAA;UAAA;UAAA;QAAA,QANF;MAAA;QAAA;QAAA;QAAA;MAAA;IARJ;MAAA;MAAA;MAAA;IAAA,QAVF,eAgCE,QAAC,IAAD;MAAM,IAAI,MAAV;MAAA,uBACE,QAAC,UAAD;QAAY,KAAK,EAAC,QAAlB;QAAA,UACI,YAAWf,IAAI,CAACmD,IAAL,CAAU,GAAV,CAAe;MAD9B;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAhCF,eAqCE,QAAC,IAAD;MAAM,IAAI,MAAV;MAAA,uBACE,QAAC,UAAD;QAAY,KAAK,EAAC,QAAlB;QAAA,UACG5C;MADH;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QArCF;EAAA;IAAA;IAAA;IAAA;EAAA,QAJF;AAgDD;;GArIQR,M;UACSzB,S;;;MADTyB,M;AAuIT,eAAeA,MAAf"},"metadata":{},"sourceType":"module"}