{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _loadBmfont = _interopRequireDefault(require(\"load-bmfont\"));\n\nvar _utils = require(\"@jimp/utils\");\n\nvar _measureText = require(\"./measure-text\");\n\nfunction xOffsetBasedOnAlignment(constants, font, line, maxWidth, alignment) {\n  if (alignment === constants.HORIZONTAL_ALIGN_LEFT) {\n    return 0;\n  }\n\n  if (alignment === constants.HORIZONTAL_ALIGN_CENTER) {\n    return (maxWidth - (0, _measureText.measureText)(font, line)) / 2;\n  }\n\n  return maxWidth - (0, _measureText.measureText)(font, line);\n}\n\nfunction drawCharacter(image, font, x, y, _char) {\n  if (_char.width > 0 && _char.height > 0) {\n    var characterPage = font.pages[_char.page];\n    image.blit(characterPage, x + _char.xoffset, y + _char.yoffset, _char.x, _char.y, _char.width, _char.height);\n  }\n\n  return image;\n}\n\nfunction printText(font, x, y, text, defaultCharWidth) {\n  for (var i = 0; i < text.length; i++) {\n    var _char2 = void 0;\n\n    if (font.chars[text[i]]) {\n      _char2 = text[i];\n    } else if (/\\s/.test(text[i])) {\n      _char2 = '';\n    } else {\n      _char2 = '?';\n    }\n\n    var fontChar = font.chars[_char2] || {};\n    var fontKerning = font.kernings[_char2];\n    drawCharacter(this, font, x, y, fontChar || {});\n    var kerning = fontKerning && fontKerning[text[i + 1]] ? fontKerning[text[i + 1]] : 0;\n    x += kerning + (fontChar.xadvance || defaultCharWidth);\n  }\n}\n\nfunction splitLines(font, text, maxWidth) {\n  var words = text.split(' ');\n  var lines = [];\n  var currentLine = [];\n  var longestLine = 0;\n  words.forEach(function (word) {\n    var line = [].concat((0, _toConsumableArray2[\"default\"])(currentLine), [word]).join(' ');\n    var length = (0, _measureText.measureText)(font, line);\n\n    if (length <= maxWidth) {\n      if (length > longestLine) {\n        longestLine = length;\n      }\n\n      currentLine.push(word);\n    } else {\n      lines.push(currentLine);\n      currentLine = [word];\n    }\n  });\n  lines.push(currentLine);\n  return {\n    lines: lines,\n    longestLine: longestLine\n  };\n}\n\nfunction loadPages(Jimp, dir, pages) {\n  var newPages = pages.map(function (page) {\n    return Jimp.read(dir + '/' + page);\n  });\n  return Promise.all(newPages);\n}\n\nvar dir = process.env.DIRNAME || \"\".concat(__dirname, \"/../\");\n\nvar _default = function _default() {\n  return {\n    constants: {\n      measureText: _measureText.measureText,\n      measureTextHeight: _measureText.measureTextHeight,\n      FONT_SANS_8_BLACK: _path[\"default\"].join(dir, 'fonts/open-sans/open-sans-8-black/open-sans-8-black.fnt'),\n      FONT_SANS_10_BLACK: _path[\"default\"].join(dir, 'fonts/open-sans/open-sans-10-black/open-sans-10-black.fnt'),\n      FONT_SANS_12_BLACK: _path[\"default\"].join(dir, 'fonts/open-sans/open-sans-12-black/open-sans-12-black.fnt'),\n      FONT_SANS_14_BLACK: _path[\"default\"].join(dir, 'fonts/open-sans/open-sans-14-black/open-sans-14-black.fnt'),\n      FONT_SANS_16_BLACK: _path[\"default\"].join(dir, 'fonts/open-sans/open-sans-16-black/open-sans-16-black.fnt'),\n      FONT_SANS_32_BLACK: _path[\"default\"].join(dir, 'fonts/open-sans/open-sans-32-black/open-sans-32-black.fnt'),\n      FONT_SANS_64_BLACK: _path[\"default\"].join(dir, 'fonts/open-sans/open-sans-64-black/open-sans-64-black.fnt'),\n      FONT_SANS_128_BLACK: _path[\"default\"].join(dir, 'fonts/open-sans/open-sans-128-black/open-sans-128-black.fnt'),\n      FONT_SANS_8_WHITE: _path[\"default\"].join(dir, 'fonts/open-sans/open-sans-8-white/open-sans-8-white.fnt'),\n      FONT_SANS_16_WHITE: _path[\"default\"].join(dir, 'fonts/open-sans/open-sans-16-white/open-sans-16-white.fnt'),\n      FONT_SANS_32_WHITE: _path[\"default\"].join(dir, 'fonts/open-sans/open-sans-32-white/open-sans-32-white.fnt'),\n      FONT_SANS_64_WHITE: _path[\"default\"].join(dir, 'fonts/open-sans/open-sans-64-white/open-sans-64-white.fnt'),\n      FONT_SANS_128_WHITE: _path[\"default\"].join(dir, 'fonts/open-sans/open-sans-128-white/open-sans-128-white.fnt'),\n\n      /**\n       * Loads a bitmap font from a file\n       * @param {string} file the file path of a .fnt file\n       * @param {function(Error, Jimp)} cb (optional) a function to call when the font is loaded\n       * @returns {Promise} a promise\n       */\n      loadFont: function loadFont(file, cb) {\n        var _this = this;\n\n        if (typeof file !== 'string') return _utils.throwError.call(this, 'file must be a string', cb);\n        return new Promise(function (resolve, reject) {\n          cb = cb || function (err, font) {\n            if (err) reject(err);else resolve(font);\n          };\n\n          (0, _loadBmfont[\"default\"])(file, function (err, font) {\n            var chars = {};\n            var kernings = {};\n\n            if (err) {\n              return _utils.throwError.call(_this, err, cb);\n            }\n\n            for (var i = 0; i < font.chars.length; i++) {\n              chars[String.fromCharCode(font.chars[i].id)] = font.chars[i];\n            }\n\n            for (var _i = 0; _i < font.kernings.length; _i++) {\n              var firstString = String.fromCharCode(font.kernings[_i].first);\n              kernings[firstString] = kernings[firstString] || {};\n              kernings[firstString][String.fromCharCode(font.kernings[_i].second)] = font.kernings[_i].amount;\n            }\n\n            loadPages(_this, _path[\"default\"].dirname(file), font.pages).then(function (pages) {\n              cb(null, {\n                chars: chars,\n                kernings: kernings,\n                pages: pages,\n                common: font.common,\n                info: font.info\n              });\n            });\n          });\n        });\n      }\n    },\n    \"class\": {\n      /**\n       * Draws a text on a image on a given boundary\n       * @param {Jimp} font a bitmap font loaded from `Jimp.loadFont` command\n       * @param {number} x the x position to start drawing the text\n       * @param {number} y the y position to start drawing the text\n       * @param {any} text the text to draw (string or object with `text`, `alignmentX`, and/or `alignmentY`)\n       * @param {number} maxWidth (optional) the boundary width to draw in\n       * @param {number} maxHeight (optional) the boundary height to draw in\n       * @param {function(Error, Jimp)} cb (optional) a function to call when the text is written\n       * @returns {Jimp} this for chaining of methods\n       */\n      print: function print(font, x, y, text, maxWidth, maxHeight, cb) {\n        var _this2 = this;\n\n        if (typeof maxWidth === 'function' && typeof cb === 'undefined') {\n          cb = maxWidth;\n          maxWidth = Infinity;\n        }\n\n        if (typeof maxWidth === 'undefined') {\n          maxWidth = Infinity;\n        }\n\n        if (typeof maxHeight === 'function' && typeof cb === 'undefined') {\n          cb = maxHeight;\n          maxHeight = Infinity;\n        }\n\n        if (typeof maxHeight === 'undefined') {\n          maxHeight = Infinity;\n        }\n\n        if ((0, _typeof2[\"default\"])(font) !== 'object') {\n          return _utils.throwError.call(this, 'font must be a Jimp loadFont', cb);\n        }\n\n        if (typeof x !== 'number' || typeof y !== 'number' || typeof maxWidth !== 'number') {\n          return _utils.throwError.call(this, 'x, y and maxWidth must be numbers', cb);\n        }\n\n        if (typeof maxWidth !== 'number') {\n          return _utils.throwError.call(this, 'maxWidth must be a number', cb);\n        }\n\n        if (typeof maxHeight !== 'number') {\n          return _utils.throwError.call(this, 'maxHeight must be a number', cb);\n        }\n\n        var alignmentX;\n        var alignmentY;\n\n        if ((0, _typeof2[\"default\"])(text) === 'object' && text.text !== null && text.text !== undefined) {\n          alignmentX = text.alignmentX || this.constructor.HORIZONTAL_ALIGN_LEFT;\n          alignmentY = text.alignmentY || this.constructor.VERTICAL_ALIGN_TOP;\n          var _text = text;\n          text = _text.text;\n        } else {\n          alignmentX = this.constructor.HORIZONTAL_ALIGN_LEFT;\n          alignmentY = this.constructor.VERTICAL_ALIGN_TOP;\n          text = text.toString();\n        }\n\n        if (maxHeight !== Infinity && alignmentY === this.constructor.VERTICAL_ALIGN_BOTTOM) {\n          y += maxHeight - (0, _measureText.measureTextHeight)(font, text, maxWidth);\n        } else if (maxHeight !== Infinity && alignmentY === this.constructor.VERTICAL_ALIGN_MIDDLE) {\n          y += maxHeight / 2 - (0, _measureText.measureTextHeight)(font, text, maxWidth) / 2;\n        }\n\n        var defaultCharWidth = Object.entries(font.chars)[0][1].xadvance;\n\n        var _splitLines = splitLines(font, text, maxWidth),\n            lines = _splitLines.lines,\n            longestLine = _splitLines.longestLine;\n\n        lines.forEach(function (line) {\n          var lineString = line.join(' ');\n          var alignmentWidth = xOffsetBasedOnAlignment(_this2.constructor, font, lineString, maxWidth, alignmentX);\n          printText.call(_this2, font, x + alignmentWidth, y, lineString, defaultCharWidth);\n          y += font.common.lineHeight;\n        });\n\n        if ((0, _utils.isNodePattern)(cb)) {\n          cb.call(this, null, this, {\n            x: x + longestLine,\n            y: y\n          });\n        }\n\n        return this;\n      }\n    }\n  };\n};\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["../src/index.js"],"names":["alignment","constants","maxWidth","char","characterPage","font","image","x","y","i","text","fontChar","fontKerning","drawCharacter","kerning","words","lines","currentLine","longestLine","line","length","newPages","Jimp","dir","Promise","process","measureText","measureTextHeight","FONT_SANS_8_BLACK","Path","FONT_SANS_10_BLACK","FONT_SANS_12_BLACK","FONT_SANS_14_BLACK","FONT_SANS_16_BLACK","FONT_SANS_32_BLACK","FONT_SANS_64_BLACK","FONT_SANS_128_BLACK","FONT_SANS_8_WHITE","FONT_SANS_16_WHITE","FONT_SANS_32_WHITE","FONT_SANS_64_WHITE","FONT_SANS_128_WHITE","loadFont","throwError","cb","reject","resolve","chars","kernings","String","firstString","loadPages","pages","common","info","print","maxHeight","alignmentX","alignmentY","defaultCharWidth","Object","splitLines","lineString","alignmentWidth","xOffsetBasedOnAlignment","printText"],"mappings":"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","sourcesContent":["import Path from 'path';\nimport bMFont from 'load-bmfont';\nimport { isNodePattern, throwError } from '@jimp/utils';\nimport { measureText, measureTextHeight } from './measure-text';\n\nfunction xOffsetBasedOnAlignment(constants, font, line, maxWidth, alignment) {\n  if (alignment === constants.HORIZONTAL_ALIGN_LEFT) {\n    return 0;\n  }\n\n  if (alignment === constants.HORIZONTAL_ALIGN_CENTER) {\n    return (maxWidth - measureText(font, line)) / 2;\n  }\n\n  return maxWidth - measureText(font, line);\n}\n\nfunction drawCharacter(image, font, x, y, char) {\n  if (char.width > 0 && char.height > 0) {\n    const characterPage = font.pages[char.page];\n\n    image.blit(\n      characterPage,\n      x + char.xoffset,\n      y + char.yoffset,\n      char.x,\n      char.y,\n      char.width,\n      char.height\n    );\n  }\n\n  return image;\n}\n\nfunction printText(font, x, y, text, defaultCharWidth) {\n  for (let i = 0; i < text.length; i++) {\n    let char;\n\n    if (font.chars[text[i]]) {\n      char = text[i];\n    } else if (/\\s/.test(text[i])) {\n      char = '';\n    } else {\n      char = '?';\n    }\n\n    const fontChar = font.chars[char] || {};\n    const fontKerning = font.kernings[char];\n\n    drawCharacter(this, font, x, y, fontChar || {});\n\n    const kerning =\n      fontKerning && fontKerning[text[i + 1]] ? fontKerning[text[i + 1]] : 0;\n\n    x += kerning + (fontChar.xadvance || defaultCharWidth);\n  }\n}\n\nfunction splitLines(font, text, maxWidth) {\n  const words = text.split(' ');\n  const lines = [];\n  let currentLine = [];\n  let longestLine = 0;\n\n  words.forEach(word => {\n    const line = [...currentLine, word].join(' ');\n    const length = measureText(font, line);\n\n    if (length <= maxWidth) {\n      if (length > longestLine) {\n        longestLine = length;\n      }\n\n      currentLine.push(word);\n    } else {\n      lines.push(currentLine);\n      currentLine = [word];\n    }\n  });\n\n  lines.push(currentLine);\n\n  return {\n    lines,\n    longestLine\n  };\n}\n\nfunction loadPages(Jimp, dir, pages) {\n  const newPages = pages.map(page => {\n    return Jimp.read(dir + '/' + page);\n  });\n\n  return Promise.all(newPages);\n}\n\nconst dir = process.env.DIRNAME || `${__dirname}/../`;\n\nexport default () => ({\n  constants: {\n    measureText,\n    measureTextHeight,\n    FONT_SANS_8_BLACK: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-8-black/open-sans-8-black.fnt'\n    ),\n    FONT_SANS_10_BLACK: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-10-black/open-sans-10-black.fnt'\n    ),\n    FONT_SANS_12_BLACK: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-12-black/open-sans-12-black.fnt'\n    ),\n    FONT_SANS_14_BLACK: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-14-black/open-sans-14-black.fnt'\n    ),\n    FONT_SANS_16_BLACK: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-16-black/open-sans-16-black.fnt'\n    ),\n    FONT_SANS_32_BLACK: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-32-black/open-sans-32-black.fnt'\n    ),\n    FONT_SANS_64_BLACK: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-64-black/open-sans-64-black.fnt'\n    ),\n    FONT_SANS_128_BLACK: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-128-black/open-sans-128-black.fnt'\n    ),\n\n    FONT_SANS_8_WHITE: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-8-white/open-sans-8-white.fnt'\n    ),\n    FONT_SANS_16_WHITE: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-16-white/open-sans-16-white.fnt'\n    ),\n    FONT_SANS_32_WHITE: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-32-white/open-sans-32-white.fnt'\n    ),\n    FONT_SANS_64_WHITE: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-64-white/open-sans-64-white.fnt'\n    ),\n    FONT_SANS_128_WHITE: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-128-white/open-sans-128-white.fnt'\n    ),\n\n    /**\n     * Loads a bitmap font from a file\n     * @param {string} file the file path of a .fnt file\n     * @param {function(Error, Jimp)} cb (optional) a function to call when the font is loaded\n     * @returns {Promise} a promise\n     */\n    loadFont(file, cb) {\n      if (typeof file !== 'string')\n        return throwError.call(this, 'file must be a string', cb);\n\n      return new Promise((resolve, reject) => {\n        cb =\n          cb ||\n          function(err, font) {\n            if (err) reject(err);\n            else resolve(font);\n          };\n\n        bMFont(file, (err, font) => {\n          const chars = {};\n          const kernings = {};\n\n          if (err) {\n            return throwError.call(this, err, cb);\n          }\n\n          for (let i = 0; i < font.chars.length; i++) {\n            chars[String.fromCharCode(font.chars[i].id)] = font.chars[i];\n          }\n\n          for (let i = 0; i < font.kernings.length; i++) {\n            const firstString = String.fromCharCode(font.kernings[i].first);\n            kernings[firstString] = kernings[firstString] || {};\n            kernings[firstString][\n              String.fromCharCode(font.kernings[i].second)\n            ] = font.kernings[i].amount;\n          }\n\n          loadPages(this, Path.dirname(file), font.pages).then(pages => {\n            cb(null, {\n              chars,\n              kernings,\n              pages,\n              common: font.common,\n              info: font.info\n            });\n          });\n        });\n      });\n    }\n  },\n\n  class: {\n    /**\n     * Draws a text on a image on a given boundary\n     * @param {Jimp} font a bitmap font loaded from `Jimp.loadFont` command\n     * @param {number} x the x position to start drawing the text\n     * @param {number} y the y position to start drawing the text\n     * @param {any} text the text to draw (string or object with `text`, `alignmentX`, and/or `alignmentY`)\n     * @param {number} maxWidth (optional) the boundary width to draw in\n     * @param {number} maxHeight (optional) the boundary height to draw in\n     * @param {function(Error, Jimp)} cb (optional) a function to call when the text is written\n     * @returns {Jimp} this for chaining of methods\n     */\n    print(font, x, y, text, maxWidth, maxHeight, cb) {\n      if (typeof maxWidth === 'function' && typeof cb === 'undefined') {\n        cb = maxWidth;\n        maxWidth = Infinity;\n      }\n\n      if (typeof maxWidth === 'undefined') {\n        maxWidth = Infinity;\n      }\n\n      if (typeof maxHeight === 'function' && typeof cb === 'undefined') {\n        cb = maxHeight;\n        maxHeight = Infinity;\n      }\n\n      if (typeof maxHeight === 'undefined') {\n        maxHeight = Infinity;\n      }\n\n      if (typeof font !== 'object') {\n        return throwError.call(this, 'font must be a Jimp loadFont', cb);\n      }\n\n      if (\n        typeof x !== 'number' ||\n        typeof y !== 'number' ||\n        typeof maxWidth !== 'number'\n      ) {\n        return throwError.call(this, 'x, y and maxWidth must be numbers', cb);\n      }\n\n      if (typeof maxWidth !== 'number') {\n        return throwError.call(this, 'maxWidth must be a number', cb);\n      }\n\n      if (typeof maxHeight !== 'number') {\n        return throwError.call(this, 'maxHeight must be a number', cb);\n      }\n\n      let alignmentX;\n      let alignmentY;\n\n      if (\n        typeof text === 'object' &&\n        text.text !== null &&\n        text.text !== undefined\n      ) {\n        alignmentX = text.alignmentX || this.constructor.HORIZONTAL_ALIGN_LEFT;\n        alignmentY = text.alignmentY || this.constructor.VERTICAL_ALIGN_TOP;\n        ({ text } = text);\n      } else {\n        alignmentX = this.constructor.HORIZONTAL_ALIGN_LEFT;\n        alignmentY = this.constructor.VERTICAL_ALIGN_TOP;\n        text = text.toString();\n      }\n\n      if (\n        maxHeight !== Infinity &&\n        alignmentY === this.constructor.VERTICAL_ALIGN_BOTTOM\n      ) {\n        y += maxHeight - measureTextHeight(font, text, maxWidth);\n      } else if (\n        maxHeight !== Infinity &&\n        alignmentY === this.constructor.VERTICAL_ALIGN_MIDDLE\n      ) {\n        y += maxHeight / 2 - measureTextHeight(font, text, maxWidth) / 2;\n      }\n\n      const defaultCharWidth = Object.entries(font.chars)[0][1].xadvance;\n      const { lines, longestLine } = splitLines(font, text, maxWidth);\n\n      lines.forEach(line => {\n        const lineString = line.join(' ');\n        const alignmentWidth = xOffsetBasedOnAlignment(\n          this.constructor,\n          font,\n          lineString,\n          maxWidth,\n          alignmentX\n        );\n\n        printText.call(\n          this,\n          font,\n          x + alignmentWidth,\n          y,\n          lineString,\n          defaultCharWidth\n        );\n\n        y += font.common.lineHeight;\n      });\n\n      if (isNodePattern(cb)) {\n        cb.call(this, null, this, { x: x + longestLine, y });\n      }\n\n      return this;\n    }\n  }\n});\n"]},"metadata":{},"sourceType":"script"}