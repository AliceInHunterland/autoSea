{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.millify = void 0;\n\nconst options_1 = require(\"./options\");\n\nconst utils_1 = require(\"./utils\");\n/**\n * Divides a number [value] until a decimal value is found.\n *\n * A generator that divides a number [value] by a denominator,\n * defined by the grouping base (interval) - `1000` by default.\n *\n * The denominator is increased every turn by multiplying\n * the base by itself, until a decimal value is realized.\n */\n\n\nfunction* divider(value, base) {\n  let denominator = base;\n\n  while (true) {\n    const result = value / denominator;\n\n    if (result < 1) {\n      return; // End of operation\n    }\n\n    yield result; // Increase the denominator after each turn\n\n    denominator *= base;\n  }\n}\n/**\n * millify converts long numbers to human-readable strings.\n */\n\n\nfunction millify(value, options) {\n  // Override default options with options supplied by user\n  const opts = options ? Object.assign(Object.assign({}, options_1.defaultOptions), options) : options_1.defaultOptions; // Allow backwards compatibility with API changes to lowercase option\n\n  if ((options === null || options === void 0 ? void 0 : options.lowerCase) !== undefined) {\n    opts.lowercase = options.lowerCase;\n  }\n\n  if (!Array.isArray(opts.units) || !opts.units.length) {\n    throw new Error(\"Option `units` must be a non-empty array\");\n  } // Validate value for type and length\n\n\n  let val = utils_1.parseValue(value); // Add a minus sign (-) prefix if it's a negative number\n\n  const prefix = val < 0 ? \"-\" : \"\"; // Work only with positive values for simplicity's sake\n\n  val = Math.abs(val); // Keep dividing the input value by the numerical grouping value (base)\n  // until the decimal and unit index is deciphered\n\n  let unitIndex = 0;\n\n  for (const result of divider(val, opts.base)) {\n    val = result;\n    unitIndex += 1;\n  } // Account for out of range errors in case the units array is not complete.\n\n\n  const unitIndexOutOfRange = unitIndex >= opts.units.length; // Calculate the unit suffix and make it lowercase (if needed).\n\n  let suffix = \"\";\n\n  if (!unitIndexOutOfRange) {\n    const unit = opts.units[unitIndex];\n    suffix = opts.lowercase ? unit.toLowerCase() : unit;\n  } else {\n    // eslint-disable-next-line no-console\n    console.warn(\"[millify] `options.units` array is of insufficient length. Add another unit to silence this warning.\");\n  } // Add a space between number and abbreviation\n\n\n  const space = opts.space && !unitIndexOutOfRange ? \" \" : \"\"; // Round decimal up to desired precision\n\n  const rounded = utils_1.roundTo(val, opts.precision); // Replace decimal mark if desired\n\n  const formatted = rounded.toString().replace(options_1.defaultOptions.decimalSeparator, opts.decimalSeparator);\n  return `${prefix}${formatted}${space}${suffix}`;\n}\n\nexports.millify = millify;\nexports.default = millify;","map":{"version":3,"names":["Object","defineProperty","exports","value","millify","options_1","require","utils_1","divider","base","denominator","result","options","opts","assign","defaultOptions","lowerCase","undefined","lowercase","Array","isArray","units","length","Error","val","parseValue","prefix","Math","abs","unitIndex","unitIndexOutOfRange","suffix","unit","toLowerCase","console","warn","space","rounded","roundTo","precision","formatted","toString","replace","decimalSeparator","default"],"sources":["/Users/ekaterinapavlova/PycharmProjects/onix/ffmpegwasm.github.io/node_modules/millify/dist/millify.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.millify = void 0;\nconst options_1 = require(\"./options\");\nconst utils_1 = require(\"./utils\");\n/**\n * Divides a number [value] until a decimal value is found.\n *\n * A generator that divides a number [value] by a denominator,\n * defined by the grouping base (interval) - `1000` by default.\n *\n * The denominator is increased every turn by multiplying\n * the base by itself, until a decimal value is realized.\n */\nfunction* divider(value, base) {\n    let denominator = base;\n    while (true) {\n        const result = value / denominator;\n        if (result < 1) {\n            return; // End of operation\n        }\n        yield result;\n        // Increase the denominator after each turn\n        denominator *= base;\n    }\n}\n/**\n * millify converts long numbers to human-readable strings.\n */\nfunction millify(value, options) {\n    // Override default options with options supplied by user\n    const opts = options\n        ? Object.assign(Object.assign({}, options_1.defaultOptions), options) : options_1.defaultOptions;\n    // Allow backwards compatibility with API changes to lowercase option\n    if ((options === null || options === void 0 ? void 0 : options.lowerCase) !== undefined) {\n        opts.lowercase = options.lowerCase;\n    }\n    if (!Array.isArray(opts.units) || !opts.units.length) {\n        throw new Error(\"Option `units` must be a non-empty array\");\n    }\n    // Validate value for type and length\n    let val = utils_1.parseValue(value);\n    // Add a minus sign (-) prefix if it's a negative number\n    const prefix = val < 0 ? \"-\" : \"\";\n    // Work only with positive values for simplicity's sake\n    val = Math.abs(val);\n    // Keep dividing the input value by the numerical grouping value (base)\n    // until the decimal and unit index is deciphered\n    let unitIndex = 0;\n    for (const result of divider(val, opts.base)) {\n        val = result;\n        unitIndex += 1;\n    }\n    // Account for out of range errors in case the units array is not complete.\n    const unitIndexOutOfRange = unitIndex >= opts.units.length;\n    // Calculate the unit suffix and make it lowercase (if needed).\n    let suffix = \"\";\n    if (!unitIndexOutOfRange) {\n        const unit = opts.units[unitIndex];\n        suffix = opts.lowercase ? unit.toLowerCase() : unit;\n    }\n    else {\n        // eslint-disable-next-line no-console\n        console.warn(\"[millify] `options.units` array is of insufficient length. Add another unit to silence this warning.\");\n    }\n    // Add a space between number and abbreviation\n    const space = opts.space && !unitIndexOutOfRange ? \" \" : \"\";\n    // Round decimal up to desired precision\n    const rounded = utils_1.roundTo(val, opts.precision);\n    // Replace decimal mark if desired\n    const formatted = rounded\n        .toString()\n        .replace(options_1.defaultOptions.decimalSeparator, opts.decimalSeparator);\n    return `${prefix}${formatted}${space}${suffix}`;\n}\nexports.millify = millify;\nexports.default = millify;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}