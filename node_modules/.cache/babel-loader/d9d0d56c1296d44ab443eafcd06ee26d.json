{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/ekaterinapavlova/PycharmProjects/onix/ffmpegwasm.github.io/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\n\nvar _asyncToGenerator = require(\"/Users/ekaterinapavlova/PycharmProjects/onix/ffmpegwasm.github.io/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar resolveURL = require('resolve-url');\n\nvar readFromBlobOrFile = function readFromBlobOrFile(blob) {\n  return new Promise(function (resolve, reject) {\n    var fileReader = new FileReader();\n\n    fileReader.onload = function () {\n      resolve(fileReader.result);\n    };\n\n    fileReader.onerror = function (_ref) {\n      var code = _ref.target.error.code;\n      reject(Error(\"File could not be read! Code=\".concat(code)));\n    };\n\n    fileReader.readAsArrayBuffer(blob);\n  });\n};\n\nmodule.exports = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_data) {\n    var data, res;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            data = _data;\n\n            if (!(typeof _data === 'undefined')) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\", new Uint8Array());\n\n          case 3:\n            if (!(typeof _data === 'string')) {\n              _context.next = 16;\n              break;\n            }\n\n            if (!/data:_data\\/([a-zA-Z]*);base64,([^\"]*)/.test(_data)) {\n              _context.next = 8;\n              break;\n            }\n\n            data = atob(_data.split(',')[1]).split('').map(function (c) {\n              return c.charCodeAt(0);\n            });\n            /* From remote server/URL */\n\n            _context.next = 14;\n            break;\n\n          case 8:\n            _context.next = 10;\n            return fetch(resolveURL(_data));\n\n          case 10:\n            res = _context.sent;\n            _context.next = 13;\n            return res.arrayBuffer();\n\n          case 13:\n            data = _context.sent;\n\n          case 14:\n            _context.next = 20;\n            break;\n\n          case 16:\n            if (!(_data instanceof File || _data instanceof Blob)) {\n              _context.next = 20;\n              break;\n            }\n\n            _context.next = 19;\n            return readFromBlobOrFile(_data);\n\n          case 19:\n            data = _context.sent;\n\n          case 20:\n            return _context.abrupt(\"return\", new Uint8Array(data));\n\n          case 21:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["resolveURL","require","readFromBlobOrFile","blob","Promise","resolve","reject","fileReader","FileReader","onload","result","onerror","code","target","error","Error","readAsArrayBuffer","module","exports","_data","data","Uint8Array","test","atob","split","map","c","charCodeAt","fetch","res","arrayBuffer","File","Blob"],"sources":["/Users/ekaterinapavlova/PycharmProjects/onix/ffmpegwasm.github.io/node_modules/@ffmpeg/ffmpeg/src/browser/fetchFile.js"],"sourcesContent":["const resolveURL = require('resolve-url');\n\nconst readFromBlobOrFile = (blob) => (\n  new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      resolve(fileReader.result);\n    };\n    fileReader.onerror = ({ target: { error: { code } } }) => {\n      reject(Error(`File could not be read! Code=${code}`));\n    };\n    fileReader.readAsArrayBuffer(blob);\n  })\n);\n\nmodule.exports = async (_data) => {\n  let data = _data;\n  if (typeof _data === 'undefined') {\n    return new Uint8Array();\n  }\n\n  if (typeof _data === 'string') {\n    /* From base64 format */\n    if (/data:_data\\/([a-zA-Z]*);base64,([^\"]*)/.test(_data)) {\n      data = atob(_data.split(',')[1])\n        .split('')\n        .map((c) => c.charCodeAt(0));\n    /* From remote server/URL */\n    } else {\n      const res = await fetch(resolveURL(_data));\n      data = await res.arrayBuffer();\n    }\n  /* From Blob or File */\n  } else if (_data instanceof File || _data instanceof Blob) {\n    data = await readFromBlobOrFile(_data);\n  }\n\n  return new Uint8Array(data);\n};\n"],"mappings":";;;;AAAA,IAAMA,UAAU,GAAGC,OAAO,CAAC,aAAD,CAA1B;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,IAAD;EAAA,OACzB,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;IAC/B,IAAMC,UAAU,GAAG,IAAIC,UAAJ,EAAnB;;IACAD,UAAU,CAACE,MAAX,GAAoB,YAAM;MACxBJ,OAAO,CAACE,UAAU,CAACG,MAAZ,CAAP;IACD,CAFD;;IAGAH,UAAU,CAACI,OAAX,GAAqB,gBAAqC;MAAA,IAAfC,IAAe,QAAlCC,MAAkC,CAAxBC,KAAwB,CAAfF,IAAe;MACxDN,MAAM,CAACS,KAAK,wCAAiCH,IAAjC,EAAN,CAAN;IACD,CAFD;;IAGAL,UAAU,CAACS,iBAAX,CAA6Bb,IAA7B;EACD,CATD,CADyB;AAAA,CAA3B;;AAaAc,MAAM,CAACC,OAAP;EAAA,uEAAiB,iBAAOC,KAAP;IAAA;IAAA;MAAA;QAAA;UAAA;YACXC,IADW,GACJD,KADI;;YAAA,MAEX,OAAOA,KAAP,KAAiB,WAFN;cAAA;cAAA;YAAA;;YAAA,iCAGN,IAAIE,UAAJ,EAHM;;UAAA;YAAA,MAMX,OAAOF,KAAP,KAAiB,QANN;cAAA;cAAA;YAAA;;YAAA,KAQT,yCAAyCG,IAAzC,CAA8CH,KAA9C,CARS;cAAA;cAAA;YAAA;;YASXC,IAAI,GAAGG,IAAI,CAACJ,KAAK,CAACK,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAD,CAAJ,CACJA,KADI,CACE,EADF,EAEJC,GAFI,CAEA,UAACC,CAAD;cAAA,OAAOA,CAAC,CAACC,UAAF,CAAa,CAAb,CAAP;YAAA,CAFA,CAAP;YAGF;;YAZa;YAAA;;UAAA;YAAA;YAAA,OAcOC,KAAK,CAAC5B,UAAU,CAACmB,KAAD,CAAX,CAdZ;;UAAA;YAcLU,GAdK;YAAA;YAAA,OAeEA,GAAG,CAACC,WAAJ,EAfF;;UAAA;YAeXV,IAfW;;UAAA;YAAA;YAAA;;UAAA;YAAA,MAkBJD,KAAK,YAAYY,IAAjB,IAAyBZ,KAAK,YAAYa,IAlBtC;cAAA;cAAA;YAAA;;YAAA;YAAA,OAmBA9B,kBAAkB,CAACiB,KAAD,CAnBlB;;UAAA;YAmBbC,IAnBa;;UAAA;YAAA,iCAsBR,IAAIC,UAAJ,CAAeD,IAAf,CAtBQ;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAjB;;EAAA;IAAA;EAAA;AAAA"},"metadata":{},"sourceType":"script"}