{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.measureText = measureText;\nexports.measureTextHeight = measureTextHeight;\n\nfunction measureText(font, text) {\n  var x = 0;\n\n  for (var i = 0; i < text.length; i++) {\n    if (font.chars[text[i]]) {\n      var kerning = font.kernings[text[i]] && font.kernings[text[i]][text[i + 1]] ? font.kernings[text[i]][text[i + 1]] : 0;\n      x += (font.chars[text[i]].xadvance || 0) + kerning;\n    }\n  }\n\n  return x;\n}\n\nfunction measureTextHeight(font, text, maxWidth) {\n  var words = text.split(' ');\n  var line = '';\n  var textTotalHeight = font.common.lineHeight;\n\n  for (var n = 0; n < words.length; n++) {\n    var testLine = line + words[n] + ' ';\n    var testWidth = measureText(font, testLine);\n\n    if (testWidth > maxWidth && n > 0) {\n      textTotalHeight += font.common.lineHeight;\n      line = words[n] + ' ';\n    } else {\n      line = testLine;\n    }\n  }\n\n  return textTotalHeight;\n}","map":{"version":3,"sources":["../src/measure-text.js"],"names":["x","i","text","font","kerning","words","line","textTotalHeight","n","testLine","testWidth","measureText"],"mappings":";;;;;;;;AAAO,SAAA,WAAA,CAAA,IAAA,EAAA,IAAA,EAAiC;EACtC,IAAIA,CAAC,GAAL,CAAA;;EAEA,KAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGC,IAAI,CAAxB,MAAA,EAAiCD,CAAjC,EAAA,EAAsC;IACpC,IAAIE,IAAI,CAAJA,KAAAA,CAAWD,IAAI,CAAnB,CAAmB,CAAfC,CAAJ,EAAyB;MACvB,IAAMC,OAAO,GACXD,IAAI,CAAJA,QAAAA,CAAcD,IAAI,CAAlBC,CAAkB,CAAlBA,KAA0BA,IAAI,CAAJA,QAAAA,CAAcD,IAAI,CAAlBC,CAAkB,CAAlBA,EAAuBD,IAAI,CAACD,CAAC,GAAvDE,CAAqD,CAA3BA,CAA1BA,GACIA,IAAI,CAAJA,QAAAA,CAAcD,IAAI,CAAlBC,CAAkB,CAAlBA,EAAuBD,IAAI,CAACD,CAAC,GADjCE,CAC+B,CAA3BA,CADJA,GADF,CAAA;MAKAH,CAAC,IAAI,CAACG,IAAI,CAAJA,KAAAA,CAAWD,IAAI,CAAfC,CAAe,CAAfA,EAAAA,QAAAA,IAAD,CAAA,IAALH,OAAAA;IACD;EACF;;EAED,OAAA,CAAA;AACD;;AAEM,SAAA,iBAAA,CAAA,IAAA,EAAA,IAAA,EAAA,QAAA,EAAiD;EACtD,IAAMK,KAAK,GAAGH,IAAI,CAAJA,KAAAA,CAAd,GAAcA,CAAd;EACA,IAAII,IAAI,GAAR,EAAA;EACA,IAAIC,eAAe,GAAGJ,IAAI,CAAJA,MAAAA,CAAtB,UAAA;;EAEA,KAAK,IAAIK,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGH,KAAK,CAAzB,MAAA,EAAkCG,CAAlC,EAAA,EAAuC;IACrC,IAAMC,QAAQ,GAAGH,IAAI,GAAGD,KAAK,CAAZC,CAAY,CAAZA,GAAjB,GAAA;IACA,IAAMI,SAAS,GAAGC,WAAW,CAAA,IAAA,EAA7B,QAA6B,CAA7B;;IAEA,IAAID,SAAS,GAATA,QAAAA,IAAwBF,CAAC,GAA7B,CAAA,EAAmC;MACjCD,eAAe,IAAIJ,IAAI,CAAJA,MAAAA,CAAnBI,UAAAA;MACAD,IAAI,GAAGD,KAAK,CAALA,CAAK,CAALA,GAAPC,GAAAA;IAFF,CAAA,MAGO;MACLA,IAAI,GAAJA,QAAAA;IACD;EACF;;EAED,OAAA,eAAA;AACD","sourcesContent":["export function measureText(font, text) {\n  let x = 0;\n\n  for (let i = 0; i < text.length; i++) {\n    if (font.chars[text[i]]) {\n      const kerning =\n        font.kernings[text[i]] && font.kernings[text[i]][text[i + 1]]\n          ? font.kernings[text[i]][text[i + 1]]\n          : 0;\n\n      x += (font.chars[text[i]].xadvance || 0) + kerning;\n    }\n  }\n\n  return x;\n}\n\nexport function measureTextHeight(font, text, maxWidth) {\n  const words = text.split(' ');\n  let line = '';\n  let textTotalHeight = font.common.lineHeight;\n\n  for (let n = 0; n < words.length; n++) {\n    const testLine = line + words[n] + ' ';\n    const testWidth = measureText(font, testLine);\n\n    if (testWidth > maxWidth && n > 0) {\n      textTotalHeight += font.common.lineHeight;\n      line = words[n] + ' ';\n    } else {\n      line = testLine;\n    }\n  }\n\n  return textTotalHeight;\n}\n"]},"metadata":{},"sourceType":"script"}