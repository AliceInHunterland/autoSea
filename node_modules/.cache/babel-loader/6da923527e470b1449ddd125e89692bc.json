{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _tinycolor = _interopRequireDefault(require(\"tinycolor2\"));\n\nvar _utils = require(\"@jimp/utils\");\n\nfunction applyKernel(im, kernel, x, y) {\n  var value = [0, 0, 0];\n  var size = (kernel.length - 1) / 2;\n\n  for (var kx = 0; kx < kernel.length; kx += 1) {\n    for (var ky = 0; ky < kernel[kx].length; ky += 1) {\n      var idx = im.getPixelIndex(x + kx - size, y + ky - size);\n      value[0] += im.bitmap.data[idx] * kernel[kx][ky];\n      value[1] += im.bitmap.data[idx + 1] * kernel[kx][ky];\n      value[2] += im.bitmap.data[idx + 2] * kernel[kx][ky];\n    }\n  }\n\n  return value;\n}\n\nvar isDef = function isDef(v) {\n  return typeof v !== 'undefined' && v !== null;\n};\n\nfunction greyscale(cb) {\n  this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n    var grey = parseInt(0.2126 * this.bitmap.data[idx] + 0.7152 * this.bitmap.data[idx + 1] + 0.0722 * this.bitmap.data[idx + 2], 10);\n    this.bitmap.data[idx] = grey;\n    this.bitmap.data[idx + 1] = grey;\n    this.bitmap.data[idx + 2] = grey;\n  });\n\n  if ((0, _utils.isNodePattern)(cb)) {\n    cb.call(this, null, this);\n  }\n\n  return this;\n}\n\nfunction mix(clr, clr2) {\n  var p = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 50;\n  return {\n    r: (clr2.r - clr.r) * (p / 100) + clr.r,\n    g: (clr2.g - clr.g) * (p / 100) + clr.g,\n    b: (clr2.b - clr.b) * (p / 100) + clr.b\n  };\n}\n\nfunction colorFn(actions, cb) {\n  var _this = this;\n\n  if (!actions || !Array.isArray(actions)) {\n    return _utils.throwError.call(this, 'actions must be an array', cb);\n  }\n\n  actions = actions.map(function (action) {\n    if (action.apply === 'xor' || action.apply === 'mix') {\n      action.params[0] = (0, _tinycolor[\"default\"])(action.params[0]).toRgb();\n    }\n\n    return action;\n  });\n  this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n    var clr = {\n      r: _this.bitmap.data[idx],\n      g: _this.bitmap.data[idx + 1],\n      b: _this.bitmap.data[idx + 2]\n    };\n\n    var colorModifier = function colorModifier(i, amount) {\n      return _this.constructor.limit255(clr[i] + amount);\n    };\n\n    actions.forEach(function (action) {\n      if (action.apply === 'mix') {\n        clr = mix(clr, action.params[0], action.params[1]);\n      } else if (action.apply === 'tint') {\n        clr = mix(clr, {\n          r: 255,\n          g: 255,\n          b: 255\n        }, action.params[0]);\n      } else if (action.apply === 'shade') {\n        clr = mix(clr, {\n          r: 0,\n          g: 0,\n          b: 0\n        }, action.params[0]);\n      } else if (action.apply === 'xor') {\n        clr = {\n          r: clr.r ^ action.params[0].r,\n          g: clr.g ^ action.params[0].g,\n          b: clr.b ^ action.params[0].b\n        };\n      } else if (action.apply === 'red') {\n        clr.r = colorModifier('r', action.params[0]);\n      } else if (action.apply === 'green') {\n        clr.g = colorModifier('g', action.params[0]);\n      } else if (action.apply === 'blue') {\n        clr.b = colorModifier('b', action.params[0]);\n      } else {\n        var _clr;\n\n        if (action.apply === 'hue') {\n          action.apply = 'spin';\n        }\n\n        clr = (0, _tinycolor[\"default\"])(clr);\n\n        if (!clr[action.apply]) {\n          return _utils.throwError.call(_this, 'action ' + action.apply + ' not supported', cb);\n        }\n\n        clr = (_clr = clr)[action.apply].apply(_clr, (0, _toConsumableArray2[\"default\"])(action.params)).toRgb();\n      }\n    });\n    _this.bitmap.data[idx] = clr.r;\n    _this.bitmap.data[idx + 1] = clr.g;\n    _this.bitmap.data[idx + 2] = clr.b;\n  });\n\n  if ((0, _utils.isNodePattern)(cb)) {\n    cb.call(this, null, this);\n  }\n\n  return this;\n}\n\nvar _default = function _default() {\n  return {\n    /**\n     * Adjusts the brightness of the image\n     * @param {number} val the amount to adjust the brightness, a number between -1 and +1\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */\n    brightness: function brightness(val, cb) {\n      if (typeof val !== 'number') {\n        return _utils.throwError.call(this, 'val must be numbers', cb);\n      }\n\n      if (val < -1 || val > +1) {\n        return _utils.throwError.call(this, 'val must be a number between -1 and +1', cb);\n      }\n\n      this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n        if (val < 0.0) {\n          this.bitmap.data[idx] = this.bitmap.data[idx] * (1 + val);\n          this.bitmap.data[idx + 1] = this.bitmap.data[idx + 1] * (1 + val);\n          this.bitmap.data[idx + 2] = this.bitmap.data[idx + 2] * (1 + val);\n        } else {\n          this.bitmap.data[idx] = this.bitmap.data[idx] + (255 - this.bitmap.data[idx]) * val;\n          this.bitmap.data[idx + 1] = this.bitmap.data[idx + 1] + (255 - this.bitmap.data[idx + 1]) * val;\n          this.bitmap.data[idx + 2] = this.bitmap.data[idx + 2] + (255 - this.bitmap.data[idx + 2]) * val;\n        }\n      });\n\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n\n      return this;\n    },\n\n    /**\n     * Adjusts the contrast of the image\n     * @param {number} val the amount to adjust the contrast, a number between -1 and +1\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */\n    contrast: function contrast(val, cb) {\n      if (typeof val !== 'number') {\n        return _utils.throwError.call(this, 'val must be numbers', cb);\n      }\n\n      if (val < -1 || val > +1) {\n        return _utils.throwError.call(this, 'val must be a number between -1 and +1', cb);\n      }\n\n      var factor = (val + 1) / (1 - val);\n\n      function adjust(value) {\n        value = Math.floor(factor * (value - 127) + 127);\n        return value < 0 ? 0 : value > 255 ? 255 : value;\n      }\n\n      this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n        this.bitmap.data[idx] = adjust(this.bitmap.data[idx]);\n        this.bitmap.data[idx + 1] = adjust(this.bitmap.data[idx + 1]);\n        this.bitmap.data[idx + 2] = adjust(this.bitmap.data[idx + 2]);\n      });\n\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n\n      return this;\n    },\n\n    /**\n     * Apply a posterize effect\n     * @param {number} n the amount to adjust the contrast, minimum threshold is two\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */\n    posterize: function posterize(n, cb) {\n      if (typeof n !== 'number') {\n        return _utils.throwError.call(this, 'n must be numbers', cb);\n      }\n\n      if (n < 2) {\n        n = 2;\n      } // minimum of 2 levels\n\n\n      this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n        this.bitmap.data[idx] = Math.floor(this.bitmap.data[idx] / 255 * (n - 1)) / (n - 1) * 255;\n        this.bitmap.data[idx + 1] = Math.floor(this.bitmap.data[idx + 1] / 255 * (n - 1)) / (n - 1) * 255;\n        this.bitmap.data[idx + 2] = Math.floor(this.bitmap.data[idx + 2] / 255 * (n - 1)) / (n - 1) * 255;\n      });\n\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n\n      return this;\n    },\n\n    /**\n     * Removes colour from the image using ITU Rec 709 luminance values\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */\n    greyscale: greyscale,\n    // Alias of greyscale for our American friends\n    grayscale: greyscale,\n\n    /**\n     * Multiplies the opacity of each pixel by a factor between 0 and 1\n     * @param {number} f A number, the factor by which to multiply the opacity of each pixel\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */\n    opacity: function opacity(f, cb) {\n      if (typeof f !== 'number') return _utils.throwError.call(this, 'f must be a number', cb);\n      if (f < 0 || f > 1) return _utils.throwError.call(this, 'f must be a number from 0 to 1', cb);\n      this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n        var v = this.bitmap.data[idx + 3] * f;\n        this.bitmap.data[idx + 3] = v;\n      });\n\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n\n      return this;\n    },\n\n    /**\n     * Applies a sepia tone to the image\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */\n    sepia: function sepia(cb) {\n      this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n        var red = this.bitmap.data[idx];\n        var green = this.bitmap.data[idx + 1];\n        var blue = this.bitmap.data[idx + 2];\n        red = red * 0.393 + green * 0.769 + blue * 0.189;\n        green = red * 0.349 + green * 0.686 + blue * 0.168;\n        blue = red * 0.272 + green * 0.534 + blue * 0.131;\n        this.bitmap.data[idx] = red < 255 ? red : 255;\n        this.bitmap.data[idx + 1] = green < 255 ? green : 255;\n        this.bitmap.data[idx + 2] = blue < 255 ? blue : 255;\n      });\n\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n\n      return this;\n    },\n\n    /**\n     * Fades each pixel by a factor between 0 and 1\n     * @param {number} f A number from 0 to 1. 0 will haven no effect. 1 will turn the image completely transparent.\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */\n    fade: function fade(f, cb) {\n      if (typeof f !== 'number') {\n        return _utils.throwError.call(this, 'f must be a number', cb);\n      }\n\n      if (f < 0 || f > 1) {\n        return _utils.throwError.call(this, 'f must be a number from 0 to 1', cb);\n      } // this method is an alternative to opacity (which may be deprecated)\n\n\n      this.opacity(1 - f);\n\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n\n      return this;\n    },\n\n    /**\n     * Adds each element of the image to its local neighbors, weighted by the kernel\n     * @param {array} kernel a matrix to weight the neighbors sum\n     * @param {string} edgeHandling (optional) define how to sum pixels from outside the border\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */\n    convolution: function convolution(kernel, edgeHandling, cb) {\n      if (typeof edgeHandling === 'function' && typeof cb === 'undefined') {\n        cb = edgeHandling;\n        edgeHandling = null;\n      }\n\n      if (!edgeHandling) {\n        edgeHandling = this.constructor.EDGE_EXTEND;\n      }\n\n      var newData = Buffer.from(this.bitmap.data);\n      var kRows = kernel.length;\n      var kCols = kernel[0].length;\n      var rowEnd = Math.floor(kRows / 2);\n      var colEnd = Math.floor(kCols / 2);\n      var rowIni = -rowEnd;\n      var colIni = -colEnd;\n      var weight;\n      var rSum;\n      var gSum;\n      var bSum;\n      var ri;\n      var gi;\n      var bi;\n      var xi;\n      var yi;\n      var idxi;\n      this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n        bSum = 0;\n        gSum = 0;\n        rSum = 0;\n\n        for (var row = rowIni; row <= rowEnd; row++) {\n          for (var col = colIni; col <= colEnd; col++) {\n            xi = x + col;\n            yi = y + row;\n            weight = kernel[row + rowEnd][col + colEnd];\n            idxi = this.getPixelIndex(xi, yi, edgeHandling);\n\n            if (idxi === -1) {\n              bi = 0;\n              gi = 0;\n              ri = 0;\n            } else {\n              ri = this.bitmap.data[idxi + 0];\n              gi = this.bitmap.data[idxi + 1];\n              bi = this.bitmap.data[idxi + 2];\n            }\n\n            rSum += weight * ri;\n            gSum += weight * gi;\n            bSum += weight * bi;\n          }\n        }\n\n        if (rSum < 0) {\n          rSum = 0;\n        }\n\n        if (gSum < 0) {\n          gSum = 0;\n        }\n\n        if (bSum < 0) {\n          bSum = 0;\n        }\n\n        if (rSum > 255) {\n          rSum = 255;\n        }\n\n        if (gSum > 255) {\n          gSum = 255;\n        }\n\n        if (bSum > 255) {\n          bSum = 255;\n        }\n\n        newData[idx + 0] = rSum;\n        newData[idx + 1] = gSum;\n        newData[idx + 2] = bSum;\n      });\n      this.bitmap.data = newData;\n\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n\n      return this;\n    },\n\n    /**\n     * Set the alpha channel on every pixel to fully opaque\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */\n    opaque: function opaque(cb) {\n      this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n        this.bitmap.data[idx + 3] = 255;\n      });\n\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n\n      return this;\n    },\n\n    /**\n     * Pixelates the image or a region\n     * @param {number} size the size of the pixels\n     * @param {number} x (optional) the x position of the region to pixelate\n     * @param {number} y (optional) the y position of the region to pixelate\n     * @param {number} w (optional) the width of the region to pixelate\n     * @param {number} h (optional) the height of the region to pixelate\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */\n    pixelate: function pixelate(size, x, y, w, h, cb) {\n      if (typeof x === 'function') {\n        cb = x;\n        h = null;\n        w = null;\n        y = null;\n        x = null;\n      } else {\n        if (typeof size !== 'number') {\n          return _utils.throwError.call(this, 'size must be a number', cb);\n        }\n\n        if (isDef(x) && typeof x !== 'number') {\n          return _utils.throwError.call(this, 'x must be a number', cb);\n        }\n\n        if (isDef(y) && typeof y !== 'number') {\n          return _utils.throwError.call(this, 'y must be a number', cb);\n        }\n\n        if (isDef(w) && typeof w !== 'number') {\n          return _utils.throwError.call(this, 'w must be a number', cb);\n        }\n\n        if (isDef(h) && typeof h !== 'number') {\n          return _utils.throwError.call(this, 'h must be a number', cb);\n        }\n      }\n\n      var kernel = [[1 / 16, 2 / 16, 1 / 16], [2 / 16, 4 / 16, 2 / 16], [1 / 16, 2 / 16, 1 / 16]];\n      x = x || 0;\n      y = y || 0;\n      w = isDef(w) ? w : this.bitmap.width - x;\n      h = isDef(h) ? h : this.bitmap.height - y;\n      var source = this.cloneQuiet();\n      this.scanQuiet(x, y, w, h, function (xx, yx, idx) {\n        xx = size * Math.floor(xx / size);\n        yx = size * Math.floor(yx / size);\n        var value = applyKernel(source, kernel, xx, yx);\n        this.bitmap.data[idx] = value[0];\n        this.bitmap.data[idx + 1] = value[1];\n        this.bitmap.data[idx + 2] = value[2];\n      });\n\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n\n      return this;\n    },\n\n    /**\n     * Applies a convolution kernel to the image or a region\n     * @param {array} kernel the convolution kernel\n     * @param {number} x (optional) the x position of the region to apply convolution to\n     * @param {number} y (optional) the y position of the region to apply convolution to\n     * @param {number} w (optional) the width of the region to apply convolution to\n     * @param {number} h (optional) the height of the region to apply convolution to\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */\n    convolute: function convolute(kernel, x, y, w, h, cb) {\n      if (!Array.isArray(kernel)) return _utils.throwError.call(this, 'the kernel must be an array', cb);\n\n      if (typeof x === 'function') {\n        cb = x;\n        x = null;\n        y = null;\n        w = null;\n        h = null;\n      } else {\n        if (isDef(x) && typeof x !== 'number') {\n          return _utils.throwError.call(this, 'x must be a number', cb);\n        }\n\n        if (isDef(y) && typeof y !== 'number') {\n          return _utils.throwError.call(this, 'y must be a number', cb);\n        }\n\n        if (isDef(w) && typeof w !== 'number') {\n          return _utils.throwError.call(this, 'w must be a number', cb);\n        }\n\n        if (isDef(h) && typeof h !== 'number') {\n          return _utils.throwError.call(this, 'h must be a number', cb);\n        }\n      }\n\n      var ksize = (kernel.length - 1) / 2;\n      x = isDef(x) ? x : ksize;\n      y = isDef(y) ? y : ksize;\n      w = isDef(w) ? w : this.bitmap.width - x;\n      h = isDef(h) ? h : this.bitmap.height - y;\n      var source = this.cloneQuiet();\n      this.scanQuiet(x, y, w, h, function (xx, yx, idx) {\n        var value = applyKernel(source, kernel, xx, yx);\n        this.bitmap.data[idx] = this.constructor.limit255(value[0]);\n        this.bitmap.data[idx + 1] = this.constructor.limit255(value[1]);\n        this.bitmap.data[idx + 2] = this.constructor.limit255(value[2]);\n      });\n\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n\n      return this;\n    },\n\n    /**\n     * Apply multiple color modification rules\n     * @param {array} actions list of color modification rules, in following format: { apply: '<rule-name>', params: [ <rule-parameters> ]  }\n     * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n     * @returns {Jimp }this for chaining of methods\n     */\n    color: colorFn,\n    colour: colorFn\n  };\n};\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["../src/index.js"],"names":["value","size","kernel","kx","ky","idx","im","x","y","isDef","v","grey","parseInt","cb","p","r","clr2","clr","g","b","Array","throwError","actions","action","colorModifier","mix","brightness","val","contrast","factor","Math","adjust","posterize","n","greyscale","grayscale","opacity","f","sepia","red","green","blue","fade","convolution","edgeHandling","newData","Buffer","kRows","kCols","rowEnd","colEnd","rowIni","colIni","bSum","gSum","rSum","row","col","xi","yi","weight","idxi","bi","gi","ri","opaque","pixelate","h","w","source","xx","yx","applyKernel","convolute","ksize","color","colour","colorFn"],"mappings":"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","sourcesContent":["import tinyColor from 'tinycolor2';\nimport { throwError, isNodePattern } from '@jimp/utils';\n\nfunction applyKernel(im, kernel, x, y) {\n  const value = [0, 0, 0];\n  const size = (kernel.length - 1) / 2;\n\n  for (let kx = 0; kx < kernel.length; kx += 1) {\n    for (let ky = 0; ky < kernel[kx].length; ky += 1) {\n      const idx = im.getPixelIndex(x + kx - size, y + ky - size);\n\n      value[0] += im.bitmap.data[idx] * kernel[kx][ky];\n      value[1] += im.bitmap.data[idx + 1] * kernel[kx][ky];\n      value[2] += im.bitmap.data[idx + 2] * kernel[kx][ky];\n    }\n  }\n\n  return value;\n}\n\nconst isDef = v => typeof v !== 'undefined' && v !== null;\n\nfunction greyscale(cb) {\n  this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n    x,\n    y,\n    idx\n  ) {\n    const grey = parseInt(\n      0.2126 * this.bitmap.data[idx] +\n        0.7152 * this.bitmap.data[idx + 1] +\n        0.0722 * this.bitmap.data[idx + 2],\n      10\n    );\n\n    this.bitmap.data[idx] = grey;\n    this.bitmap.data[idx + 1] = grey;\n    this.bitmap.data[idx + 2] = grey;\n  });\n\n  if (isNodePattern(cb)) {\n    cb.call(this, null, this);\n  }\n\n  return this;\n}\n\nfunction mix(clr, clr2, p = 50) {\n  return {\n    r: (clr2.r - clr.r) * (p / 100) + clr.r,\n    g: (clr2.g - clr.g) * (p / 100) + clr.g,\n    b: (clr2.b - clr.b) * (p / 100) + clr.b\n  };\n}\n\nfunction colorFn(actions, cb) {\n  if (!actions || !Array.isArray(actions)) {\n    return throwError.call(this, 'actions must be an array', cb);\n  }\n\n  actions = actions.map(action => {\n    if (action.apply === 'xor' || action.apply === 'mix') {\n      action.params[0] = tinyColor(action.params[0]).toRgb();\n    }\n\n    return action;\n  });\n\n  this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, (x, y, idx) => {\n    let clr = {\n      r: this.bitmap.data[idx],\n      g: this.bitmap.data[idx + 1],\n      b: this.bitmap.data[idx + 2]\n    };\n\n    const colorModifier = (i, amount) =>\n      this.constructor.limit255(clr[i] + amount);\n\n    actions.forEach(action => {\n      if (action.apply === 'mix') {\n        clr = mix(clr, action.params[0], action.params[1]);\n      } else if (action.apply === 'tint') {\n        clr = mix(clr, { r: 255, g: 255, b: 255 }, action.params[0]);\n      } else if (action.apply === 'shade') {\n        clr = mix(clr, { r: 0, g: 0, b: 0 }, action.params[0]);\n      } else if (action.apply === 'xor') {\n        clr = {\n          r: clr.r ^ action.params[0].r,\n          g: clr.g ^ action.params[0].g,\n          b: clr.b ^ action.params[0].b\n        };\n      } else if (action.apply === 'red') {\n        clr.r = colorModifier('r', action.params[0]);\n      } else if (action.apply === 'green') {\n        clr.g = colorModifier('g', action.params[0]);\n      } else if (action.apply === 'blue') {\n        clr.b = colorModifier('b', action.params[0]);\n      } else {\n        if (action.apply === 'hue') {\n          action.apply = 'spin';\n        }\n\n        clr = tinyColor(clr);\n\n        if (!clr[action.apply]) {\n          return throwError.call(\n            this,\n            'action ' + action.apply + ' not supported',\n            cb\n          );\n        }\n\n        clr = clr[action.apply](...action.params).toRgb();\n      }\n    });\n\n    this.bitmap.data[idx] = clr.r;\n    this.bitmap.data[idx + 1] = clr.g;\n    this.bitmap.data[idx + 2] = clr.b;\n  });\n\n  if (isNodePattern(cb)) {\n    cb.call(this, null, this);\n  }\n\n  return this;\n}\n\nexport default () => ({\n  /**\n   * Adjusts the brightness of the image\n   * @param {number} val the amount to adjust the brightness, a number between -1 and +1\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp }this for chaining of methods\n   */\n  brightness(val, cb) {\n    if (typeof val !== 'number') {\n      return throwError.call(this, 'val must be numbers', cb);\n    }\n\n    if (val < -1 || val > +1) {\n      return throwError.call(\n        this,\n        'val must be a number between -1 and +1',\n        cb\n      );\n    }\n\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      if (val < 0.0) {\n        this.bitmap.data[idx] = this.bitmap.data[idx] * (1 + val);\n        this.bitmap.data[idx + 1] = this.bitmap.data[idx + 1] * (1 + val);\n        this.bitmap.data[idx + 2] = this.bitmap.data[idx + 2] * (1 + val);\n      } else {\n        this.bitmap.data[idx] =\n          this.bitmap.data[idx] + (255 - this.bitmap.data[idx]) * val;\n        this.bitmap.data[idx + 1] =\n          this.bitmap.data[idx + 1] + (255 - this.bitmap.data[idx + 1]) * val;\n        this.bitmap.data[idx + 2] =\n          this.bitmap.data[idx + 2] + (255 - this.bitmap.data[idx + 2]) * val;\n      }\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  },\n\n  /**\n   * Adjusts the contrast of the image\n   * @param {number} val the amount to adjust the contrast, a number between -1 and +1\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp }this for chaining of methods\n   */\n  contrast(val, cb) {\n    if (typeof val !== 'number') {\n      return throwError.call(this, 'val must be numbers', cb);\n    }\n\n    if (val < -1 || val > +1) {\n      return throwError.call(\n        this,\n        'val must be a number between -1 and +1',\n        cb\n      );\n    }\n\n    const factor = (val + 1) / (1 - val);\n\n    function adjust(value) {\n      value = Math.floor(factor * (value - 127) + 127);\n\n      return value < 0 ? 0 : value > 255 ? 255 : value;\n    }\n\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] = adjust(this.bitmap.data[idx]);\n      this.bitmap.data[idx + 1] = adjust(this.bitmap.data[idx + 1]);\n      this.bitmap.data[idx + 2] = adjust(this.bitmap.data[idx + 2]);\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  },\n\n  /**\n   * Apply a posterize effect\n   * @param {number} n the amount to adjust the contrast, minimum threshold is two\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp }this for chaining of methods\n   */\n  posterize(n, cb) {\n    if (typeof n !== 'number') {\n      return throwError.call(this, 'n must be numbers', cb);\n    }\n\n    if (n < 2) {\n      n = 2;\n    } // minimum of 2 levels\n\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx] =\n        (Math.floor((this.bitmap.data[idx] / 255) * (n - 1)) / (n - 1)) * 255;\n      this.bitmap.data[idx + 1] =\n        (Math.floor((this.bitmap.data[idx + 1] / 255) * (n - 1)) / (n - 1)) *\n        255;\n      this.bitmap.data[idx + 2] =\n        (Math.floor((this.bitmap.data[idx + 2] / 255) * (n - 1)) / (n - 1)) *\n        255;\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  },\n\n  /**\n   * Removes colour from the image using ITU Rec 709 luminance values\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp }this for chaining of methods\n   */\n  greyscale,\n\n  // Alias of greyscale for our American friends\n  grayscale: greyscale,\n\n  /**\n   * Multiplies the opacity of each pixel by a factor between 0 and 1\n   * @param {number} f A number, the factor by which to multiply the opacity of each pixel\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp }this for chaining of methods\n   */\n  opacity(f, cb) {\n    if (typeof f !== 'number')\n      return throwError.call(this, 'f must be a number', cb);\n    if (f < 0 || f > 1)\n      return throwError.call(this, 'f must be a number from 0 to 1', cb);\n\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      const v = this.bitmap.data[idx + 3] * f;\n      this.bitmap.data[idx + 3] = v;\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  },\n\n  /**\n   * Applies a sepia tone to the image\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp }this for chaining of methods\n   */\n  sepia(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      let red = this.bitmap.data[idx];\n      let green = this.bitmap.data[idx + 1];\n      let blue = this.bitmap.data[idx + 2];\n\n      red = red * 0.393 + green * 0.769 + blue * 0.189;\n      green = red * 0.349 + green * 0.686 + blue * 0.168;\n      blue = red * 0.272 + green * 0.534 + blue * 0.131;\n\n      this.bitmap.data[idx] = red < 255 ? red : 255;\n      this.bitmap.data[idx + 1] = green < 255 ? green : 255;\n      this.bitmap.data[idx + 2] = blue < 255 ? blue : 255;\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  },\n\n  /**\n   * Fades each pixel by a factor between 0 and 1\n   * @param {number} f A number from 0 to 1. 0 will haven no effect. 1 will turn the image completely transparent.\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp }this for chaining of methods\n   */\n  fade(f, cb) {\n    if (typeof f !== 'number') {\n      return throwError.call(this, 'f must be a number', cb);\n    }\n\n    if (f < 0 || f > 1) {\n      return throwError.call(this, 'f must be a number from 0 to 1', cb);\n    }\n\n    // this method is an alternative to opacity (which may be deprecated)\n    this.opacity(1 - f);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  },\n\n  /**\n   * Adds each element of the image to its local neighbors, weighted by the kernel\n   * @param {array} kernel a matrix to weight the neighbors sum\n   * @param {string} edgeHandling (optional) define how to sum pixels from outside the border\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp }this for chaining of methods\n   */\n  convolution(kernel, edgeHandling, cb) {\n    if (typeof edgeHandling === 'function' && typeof cb === 'undefined') {\n      cb = edgeHandling;\n      edgeHandling = null;\n    }\n\n    if (!edgeHandling) {\n      edgeHandling = this.constructor.EDGE_EXTEND;\n    }\n\n    const newData = Buffer.from(this.bitmap.data);\n    const kRows = kernel.length;\n    const kCols = kernel[0].length;\n    const rowEnd = Math.floor(kRows / 2);\n    const colEnd = Math.floor(kCols / 2);\n    const rowIni = -rowEnd;\n    const colIni = -colEnd;\n\n    let weight;\n    let rSum;\n    let gSum;\n    let bSum;\n    let ri;\n    let gi;\n    let bi;\n    let xi;\n    let yi;\n    let idxi;\n\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      bSum = 0;\n      gSum = 0;\n      rSum = 0;\n\n      for (let row = rowIni; row <= rowEnd; row++) {\n        for (let col = colIni; col <= colEnd; col++) {\n          xi = x + col;\n          yi = y + row;\n          weight = kernel[row + rowEnd][col + colEnd];\n          idxi = this.getPixelIndex(xi, yi, edgeHandling);\n\n          if (idxi === -1) {\n            bi = 0;\n            gi = 0;\n            ri = 0;\n          } else {\n            ri = this.bitmap.data[idxi + 0];\n            gi = this.bitmap.data[idxi + 1];\n            bi = this.bitmap.data[idxi + 2];\n          }\n\n          rSum += weight * ri;\n          gSum += weight * gi;\n          bSum += weight * bi;\n        }\n      }\n\n      if (rSum < 0) {\n        rSum = 0;\n      }\n\n      if (gSum < 0) {\n        gSum = 0;\n      }\n\n      if (bSum < 0) {\n        bSum = 0;\n      }\n\n      if (rSum > 255) {\n        rSum = 255;\n      }\n\n      if (gSum > 255) {\n        gSum = 255;\n      }\n\n      if (bSum > 255) {\n        bSum = 255;\n      }\n\n      newData[idx + 0] = rSum;\n      newData[idx + 1] = gSum;\n      newData[idx + 2] = bSum;\n    });\n\n    this.bitmap.data = newData;\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  },\n\n  /**\n   * Set the alpha channel on every pixel to fully opaque\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp }this for chaining of methods\n   */\n  opaque(cb) {\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function(\n      x,\n      y,\n      idx\n    ) {\n      this.bitmap.data[idx + 3] = 255;\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  },\n\n  /**\n   * Pixelates the image or a region\n   * @param {number} size the size of the pixels\n   * @param {number} x (optional) the x position of the region to pixelate\n   * @param {number} y (optional) the y position of the region to pixelate\n   * @param {number} w (optional) the width of the region to pixelate\n   * @param {number} h (optional) the height of the region to pixelate\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp }this for chaining of methods\n   */\n  pixelate(size, x, y, w, h, cb) {\n    if (typeof x === 'function') {\n      cb = x;\n      h = null;\n      w = null;\n      y = null;\n      x = null;\n    } else {\n      if (typeof size !== 'number') {\n        return throwError.call(this, 'size must be a number', cb);\n      }\n\n      if (isDef(x) && typeof x !== 'number') {\n        return throwError.call(this, 'x must be a number', cb);\n      }\n\n      if (isDef(y) && typeof y !== 'number') {\n        return throwError.call(this, 'y must be a number', cb);\n      }\n\n      if (isDef(w) && typeof w !== 'number') {\n        return throwError.call(this, 'w must be a number', cb);\n      }\n\n      if (isDef(h) && typeof h !== 'number') {\n        return throwError.call(this, 'h must be a number', cb);\n      }\n    }\n\n    const kernel = [\n      [1 / 16, 2 / 16, 1 / 16],\n      [2 / 16, 4 / 16, 2 / 16],\n      [1 / 16, 2 / 16, 1 / 16]\n    ];\n\n    x = x || 0;\n    y = y || 0;\n    w = isDef(w) ? w : this.bitmap.width - x;\n    h = isDef(h) ? h : this.bitmap.height - y;\n\n    const source = this.cloneQuiet();\n\n    this.scanQuiet(x, y, w, h, function(xx, yx, idx) {\n      xx = size * Math.floor(xx / size);\n      yx = size * Math.floor(yx / size);\n\n      const value = applyKernel(source, kernel, xx, yx);\n\n      this.bitmap.data[idx] = value[0];\n      this.bitmap.data[idx + 1] = value[1];\n      this.bitmap.data[idx + 2] = value[2];\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  },\n\n  /**\n   * Applies a convolution kernel to the image or a region\n   * @param {array} kernel the convolution kernel\n   * @param {number} x (optional) the x position of the region to apply convolution to\n   * @param {number} y (optional) the y position of the region to apply convolution to\n   * @param {number} w (optional) the width of the region to apply convolution to\n   * @param {number} h (optional) the height of the region to apply convolution to\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp }this for chaining of methods\n   */\n  convolute(kernel, x, y, w, h, cb) {\n    if (!Array.isArray(kernel))\n      return throwError.call(this, 'the kernel must be an array', cb);\n\n    if (typeof x === 'function') {\n      cb = x;\n      x = null;\n      y = null;\n      w = null;\n      h = null;\n    } else {\n      if (isDef(x) && typeof x !== 'number') {\n        return throwError.call(this, 'x must be a number', cb);\n      }\n\n      if (isDef(y) && typeof y !== 'number') {\n        return throwError.call(this, 'y must be a number', cb);\n      }\n\n      if (isDef(w) && typeof w !== 'number') {\n        return throwError.call(this, 'w must be a number', cb);\n      }\n\n      if (isDef(h) && typeof h !== 'number') {\n        return throwError.call(this, 'h must be a number', cb);\n      }\n    }\n\n    const ksize = (kernel.length - 1) / 2;\n\n    x = isDef(x) ? x : ksize;\n    y = isDef(y) ? y : ksize;\n    w = isDef(w) ? w : this.bitmap.width - x;\n    h = isDef(h) ? h : this.bitmap.height - y;\n\n    const source = this.cloneQuiet();\n\n    this.scanQuiet(x, y, w, h, function(xx, yx, idx) {\n      const value = applyKernel(source, kernel, xx, yx);\n\n      this.bitmap.data[idx] = this.constructor.limit255(value[0]);\n      this.bitmap.data[idx + 1] = this.constructor.limit255(value[1]);\n      this.bitmap.data[idx + 2] = this.constructor.limit255(value[2]);\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  },\n\n  /**\n   * Apply multiple color modification rules\n   * @param {array} actions list of color modification rules, in following format: { apply: '<rule-name>', params: [ <rule-parameters> ]  }\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp }this for chaining of methods\n   */\n  color: colorFn,\n  colour: colorFn\n});\n"]},"metadata":{},"sourceType":"script"}