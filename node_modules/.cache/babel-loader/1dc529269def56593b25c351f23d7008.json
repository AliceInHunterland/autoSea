{"ast":null,"code":"var _jsxFileName = \"/Users/ekaterinapavlova/PycharmProjects/onix/ffmpegwasm.github.io/src/Usage.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Highlight, { defaultProps } from 'prism-react-renderer';\nimport vsDark from 'prism-react-renderer/themes/vsDark';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BROWSER_CODE = `\n<body>\n  <video id=\"player\" controls></video>\n  <input type=\"file\" id=\"uploader\">\n  <script src=\"ffmpeg.min.js\"></script>\n  <script>\n    const { createFFmpeg, fetchFile } = FFmpeg;\n    const ffmpeg = createFFmpeg({ log: true });\n    const transcode = async ({ target: { files } }) => {\n      const { name } = files[0];\n      await ffmpeg.load();\n      ffmpeg.FS('writeFile', name, await fetchFile(files[0]));\n      await ffmpeg.run('-i', name,  'output.mp4');\n      const data = ffmpeg.FS('readFile', 'output.mp4');\n      const video = document.getElementById('player');\n      video.src = URL.createObjectURL(new Blob([data.buffer], { type: 'video/mp4' }));\n    }\n    document\n      .getElementById('uploader').addEventListener('change', transcode);\n  </script>\n</body>\n`.trim('\\n');\nconst NODE_CODE = `\nconst fs = require('fs');\nconst { createFFmpeg, fetchFile } = require('@ffmpeg/ffmpeg');\n\nconst ffmpeg = createFFmpeg({ log: true });\n\n(async () => {\n  await ffmpeg.load();\n  ffmpeg.FS('writeFile', 'test.avi', await fetchFile('./test.avi'));\n  await ffmpeg.run('-i', 'test.avi', 'test.mp4');\n  await fs.promises.writeFile('./test.mp4', ffmpeg.FS('readFile', 'test.mp4'));\n  process.exit(0);\n})();\n`.trim('\\n');\nconst useStyles = makeStyles({\n  root: {\n    margin: '48px 0px 48px 0px'\n  },\n  para: {\n    margin: '24px 0px 24px 0px'\n  }\n});\n\nfunction ReadOnlyEditor(props) {\n  return /*#__PURE__*/_jsxDEV(Highlight, { ...defaultProps,\n    theme: vsDark,\n    ...props,\n    children: _ref => {\n      let {\n        tokens,\n        getLineProps,\n        getTokenProps\n      } = _ref;\n      return /*#__PURE__*/_jsxDEV(\"pre\", {\n        style: {\n          fontSize: 18\n        },\n        children: tokens.map((line, i) => /*#__PURE__*/_jsxDEV(\"div\", { ...getLineProps({\n            line,\n            key: i\n          }),\n          children: line.map((token, key) => /*#__PURE__*/_jsxDEV(\"span\", { ...getTokenProps({\n              token,\n              key\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_c = ReadOnlyEditor;\n\nfunction Usage() {\n  _s();\n\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    className: classes.root,\n    container: true,\n    direction: \"column\",\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      align: \"center\",\n      variant: \"h4\",\n      children: \"Usage\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      className: classes.para,\n      align: \"center\",\n      variant: \"h6\",\n      children: \"With few lines of code you can use ffmpeg.wasm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      children: \"Browser\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReadOnlyEditor, {\n      language: \"html\",\n      code: BROWSER_CODE\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      children: \"Node.JS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReadOnlyEditor, {\n      language: \"javascript\",\n      code: NODE_CODE\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Usage, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c2 = Usage;\nexport default Usage;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ReadOnlyEditor\");\n$RefreshReg$(_c2, \"Usage\");","map":{"version":3,"names":["React","Grid","Typography","makeStyles","Highlight","defaultProps","vsDark","BROWSER_CODE","trim","NODE_CODE","useStyles","root","margin","para","ReadOnlyEditor","props","tokens","getLineProps","getTokenProps","fontSize","map","line","i","key","token","Usage","classes"],"sources":["/Users/ekaterinapavlova/PycharmProjects/onix/ffmpegwasm.github.io/src/Usage.js"],"sourcesContent":["import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Highlight, { defaultProps } from 'prism-react-renderer';\nimport vsDark from 'prism-react-renderer/themes/vsDark';\n\nconst BROWSER_CODE=`\n<body>\n  <video id=\"player\" controls></video>\n  <input type=\"file\" id=\"uploader\">\n  <script src=\"ffmpeg.min.js\"></script>\n  <script>\n    const { createFFmpeg, fetchFile } = FFmpeg;\n    const ffmpeg = createFFmpeg({ log: true });\n    const transcode = async ({ target: { files } }) => {\n      const { name } = files[0];\n      await ffmpeg.load();\n      ffmpeg.FS('writeFile', name, await fetchFile(files[0]));\n      await ffmpeg.run('-i', name,  'output.mp4');\n      const data = ffmpeg.FS('readFile', 'output.mp4');\n      const video = document.getElementById('player');\n      video.src = URL.createObjectURL(new Blob([data.buffer], { type: 'video/mp4' }));\n    }\n    document\n      .getElementById('uploader').addEventListener('change', transcode);\n  </script>\n</body>\n`.trim('\\n');\n\nconst NODE_CODE=`\nconst fs = require('fs');\nconst { createFFmpeg, fetchFile } = require('@ffmpeg/ffmpeg');\n\nconst ffmpeg = createFFmpeg({ log: true });\n\n(async () => {\n  await ffmpeg.load();\n  ffmpeg.FS('writeFile', 'test.avi', await fetchFile('./test.avi'));\n  await ffmpeg.run('-i', 'test.avi', 'test.mp4');\n  await fs.promises.writeFile('./test.mp4', ffmpeg.FS('readFile', 'test.mp4'));\n  process.exit(0);\n})();\n`.trim('\\n');\n\nconst useStyles = makeStyles({\n  root: {\n    margin: '48px 0px 48px 0px',\n  },\n  para: {\n    margin: '24px 0px 24px 0px',\n  },\n});\n\nfunction ReadOnlyEditor(props) {\n  return (\n    <Highlight {...defaultProps} theme={vsDark} {...props}>\n      {({ tokens, getLineProps, getTokenProps }) => (\n        <pre style={{fontSize: 18}}>\n          {tokens.map((line, i) => (\n            <div {...getLineProps({ line, key: i })}>\n              {line.map((token, key) => (\n                <span {...getTokenProps({ token, key })} />\n              ))}\n            </div>\n          ))}\n        </pre>\n      )}\n    </Highlight>\n  );\n}\n\nfunction Usage() {\n  const classes = useStyles();\n  return (\n    <Grid className={classes.root} container direction=\"column\" >\n      <Typography align=\"center\" variant=\"h4\">\n        Usage\n      </Typography>\n      <Typography className={classes.para} align=\"center\" variant=\"h6\">\n        With few lines of code you can use ffmpeg.wasm\n      </Typography>\n      <Typography variant=\"h6\">\n        Browser\n      </Typography>\n      <ReadOnlyEditor\n        language=\"html\"\n        code={BROWSER_CODE}\n      />\n      <Typography variant=\"h6\">\n        Node.JS\n      </Typography>\n      <ReadOnlyEditor\n        language=\"javascript\"\n        code={NODE_CODE}\n      />\n    </Grid>\n  );\n}\n\nexport default Usage;\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,SAAP,IAAoBC,YAApB,QAAwC,sBAAxC;AACA,OAAOC,MAAP,MAAmB,oCAAnB;;AAEA,MAAMC,YAAY,GAAE;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CArBmB,CAqBjBC,IArBiB,CAqBZ,IArBY,CAAnB;AAuBA,MAAMC,SAAS,GAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbgB,CAadD,IAbc,CAaT,IAbS,CAAhB;AAeA,MAAME,SAAS,GAAGP,UAAU,CAAC;EAC3BQ,IAAI,EAAE;IACJC,MAAM,EAAE;EADJ,CADqB;EAI3BC,IAAI,EAAE;IACJD,MAAM,EAAE;EADJ;AAJqB,CAAD,CAA5B;;AASA,SAASE,cAAT,CAAwBC,KAAxB,EAA+B;EAC7B,oBACE,QAAC,SAAD,OAAeV,YAAf;IAA6B,KAAK,EAAEC,MAApC;IAAA,GAAgDS,KAAhD;IAAA,UACG;MAAA,IAAC;QAAEC,MAAF;QAAUC,YAAV;QAAwBC;MAAxB,CAAD;MAAA,oBACC;QAAK,KAAK,EAAE;UAACC,QAAQ,EAAE;QAAX,CAAZ;QAAA,UACGH,MAAM,CAACI,GAAP,CAAW,CAACC,IAAD,EAAOC,CAAP,kBACV,oBAASL,YAAY,CAAC;YAAEI,IAAF;YAAQE,GAAG,EAAED;UAAb,CAAD,CAArB;UAAA,UACGD,IAAI,CAACD,GAAL,CAAS,CAACI,KAAD,EAAQD,GAAR,kBACR,qBAAUL,aAAa,CAAC;cAAEM,KAAF;cAASD;YAAT,CAAD;UAAvB;YAAA;YAAA;YAAA;UAAA,QADD;QADH;UAAA;UAAA;UAAA;QAAA,QADD;MADH;QAAA;QAAA;QAAA;MAAA,QADD;IAAA;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAeD;;KAhBQT,c;;AAkBT,SAASW,KAAT,GAAiB;EAAA;;EACf,MAAMC,OAAO,GAAGhB,SAAS,EAAzB;EACA,oBACE,QAAC,IAAD;IAAM,SAAS,EAAEgB,OAAO,CAACf,IAAzB;IAA+B,SAAS,MAAxC;IAAyC,SAAS,EAAC,QAAnD;IAAA,wBACE,QAAC,UAAD;MAAY,KAAK,EAAC,QAAlB;MAA2B,OAAO,EAAC,IAAnC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAIE,QAAC,UAAD;MAAY,SAAS,EAAEe,OAAO,CAACb,IAA/B;MAAqC,KAAK,EAAC,QAA3C;MAAoD,OAAO,EAAC,IAA5D;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAJF,eAOE,QAAC,UAAD;MAAY,OAAO,EAAC,IAApB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAPF,eAUE,QAAC,cAAD;MACE,QAAQ,EAAC,MADX;MAEE,IAAI,EAAEN;IAFR;MAAA;MAAA;MAAA;IAAA,QAVF,eAcE,QAAC,UAAD;MAAY,OAAO,EAAC,IAApB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAdF,eAiBE,QAAC,cAAD;MACE,QAAQ,EAAC,YADX;MAEE,IAAI,EAAEE;IAFR;MAAA;MAAA;MAAA;IAAA,QAjBF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAwBD;;GA1BQgB,K;UACSf,S;;;MADTe,K;AA4BT,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}