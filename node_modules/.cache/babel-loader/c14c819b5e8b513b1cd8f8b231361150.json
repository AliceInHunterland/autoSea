{"ast":null,"code":"const resolveURL = require('resolve-url');\n\nconst readFromBlobOrFile = blob => new Promise((resolve, reject) => {\n  const fileReader = new FileReader();\n\n  fileReader.onload = () => {\n    resolve(fileReader.result);\n  };\n\n  fileReader.onerror = _ref => {\n    let {\n      target: {\n        error: {\n          code\n        }\n      }\n    } = _ref;\n    reject(Error(`File could not be read! Code=${code}`));\n  };\n\n  fileReader.readAsArrayBuffer(blob);\n});\n\nmodule.exports = async _data => {\n  let data = _data;\n\n  if (typeof _data === 'undefined') {\n    return new Uint8Array();\n  }\n\n  if (typeof _data === 'string') {\n    /* From base64 format */\n    if (/data:_data\\/([a-zA-Z]*);base64,([^\"]*)/.test(_data)) {\n      data = atob(_data.split(',')[1]).split('').map(c => c.charCodeAt(0));\n      /* From remote server/URL */\n    } else {\n      const res = await fetch(resolveURL(_data));\n      data = await res.arrayBuffer();\n    }\n    /* From Blob or File */\n\n  } else if (_data instanceof File || _data instanceof Blob) {\n    data = await readFromBlobOrFile(_data);\n  }\n\n  return new Uint8Array(data);\n};","map":{"version":3,"names":["resolveURL","require","readFromBlobOrFile","blob","Promise","resolve","reject","fileReader","FileReader","onload","result","onerror","target","error","code","Error","readAsArrayBuffer","module","exports","_data","data","Uint8Array","test","atob","split","map","c","charCodeAt","res","fetch","arrayBuffer","File","Blob"],"sources":["/Users/ekaterinapavlova/PycharmProjects/onix/ffmpegwasm.github.io/node_modules/@ffmpeg/ffmpeg/src/browser/fetchFile.js"],"sourcesContent":["const resolveURL = require('resolve-url');\n\nconst readFromBlobOrFile = (blob) => (\n  new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      resolve(fileReader.result);\n    };\n    fileReader.onerror = ({ target: { error: { code } } }) => {\n      reject(Error(`File could not be read! Code=${code}`));\n    };\n    fileReader.readAsArrayBuffer(blob);\n  })\n);\n\nmodule.exports = async (_data) => {\n  let data = _data;\n  if (typeof _data === 'undefined') {\n    return new Uint8Array();\n  }\n\n  if (typeof _data === 'string') {\n    /* From base64 format */\n    if (/data:_data\\/([a-zA-Z]*);base64,([^\"]*)/.test(_data)) {\n      data = atob(_data.split(',')[1])\n        .split('')\n        .map((c) => c.charCodeAt(0));\n    /* From remote server/URL */\n    } else {\n      const res = await fetch(resolveURL(_data));\n      data = await res.arrayBuffer();\n    }\n  /* From Blob or File */\n  } else if (_data instanceof File || _data instanceof Blob) {\n    data = await readFromBlobOrFile(_data);\n  }\n\n  return new Uint8Array(data);\n};\n"],"mappings":"AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAC,aAAD,CAA1B;;AAEA,MAAMC,kBAAkB,GAAIC,IAAD,IACzB,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;EAC/B,MAAMC,UAAU,GAAG,IAAIC,UAAJ,EAAnB;;EACAD,UAAU,CAACE,MAAX,GAAoB,MAAM;IACxBJ,OAAO,CAACE,UAAU,CAACG,MAAZ,CAAP;EACD,CAFD;;EAGAH,UAAU,CAACI,OAAX,GAAqB,QAAqC;IAAA,IAApC;MAAEC,MAAM,EAAE;QAAEC,KAAK,EAAE;UAAEC;QAAF;MAAT;IAAV,CAAoC;IACxDR,MAAM,CAACS,KAAK,CAAE,gCAA+BD,IAAK,EAAtC,CAAN,CAAN;EACD,CAFD;;EAGAP,UAAU,CAACS,iBAAX,CAA6Bb,IAA7B;AACD,CATD,CADF;;AAaAc,MAAM,CAACC,OAAP,GAAiB,MAAOC,KAAP,IAAiB;EAChC,IAAIC,IAAI,GAAGD,KAAX;;EACA,IAAI,OAAOA,KAAP,KAAiB,WAArB,EAAkC;IAChC,OAAO,IAAIE,UAAJ,EAAP;EACD;;EAED,IAAI,OAAOF,KAAP,KAAiB,QAArB,EAA+B;IAC7B;IACA,IAAI,yCAAyCG,IAAzC,CAA8CH,KAA9C,CAAJ,EAA0D;MACxDC,IAAI,GAAGG,IAAI,CAACJ,KAAK,CAACK,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAD,CAAJ,CACJA,KADI,CACE,EADF,EAEJC,GAFI,CAECC,CAAD,IAAOA,CAAC,CAACC,UAAF,CAAa,CAAb,CAFP,CAAP;MAGF;IACC,CALD,MAKO;MACL,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC7B,UAAU,CAACmB,KAAD,CAAX,CAAvB;MACAC,IAAI,GAAG,MAAMQ,GAAG,CAACE,WAAJ,EAAb;IACD;IACH;;EACC,CAZD,MAYO,IAAIX,KAAK,YAAYY,IAAjB,IAAyBZ,KAAK,YAAYa,IAA9C,EAAoD;IACzDZ,IAAI,GAAG,MAAMlB,kBAAkB,CAACiB,KAAD,CAA/B;EACD;;EAED,OAAO,IAAIE,UAAJ,CAAeD,IAAf,CAAP;AACD,CAvBD"},"metadata":{},"sourceType":"script"}