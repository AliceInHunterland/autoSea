{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _utils = require(\"@jimp/utils\");\n/**\n * Applies a minimum color threshold to a greyscale image.  Converts image to greyscale by default\n * @param {number} options object\n *  max: A number auto limited between 0 - 255\n *  replace: (optional) A number auto limited between 0 - 255 (default 255)\n *  autoGreyscale: (optional) A boolean whether to apply greyscale beforehand (default true)\n * @param {number} cb (optional) a callback for when complete\n * @return {this} this for chaining of methods\n */\n\n\nvar _default = function _default() {\n  return {\n    threshold: function threshold(_ref, cb) {\n      var _this = this;\n\n      var max = _ref.max,\n          _ref$replace = _ref.replace,\n          replace = _ref$replace === void 0 ? 255 : _ref$replace,\n          _ref$autoGreyscale = _ref.autoGreyscale,\n          autoGreyscale = _ref$autoGreyscale === void 0 ? true : _ref$autoGreyscale;\n\n      if (typeof max !== 'number') {\n        return _utils.throwError.call(this, 'max must be a number', cb);\n      }\n\n      if (typeof replace !== 'number') {\n        return _utils.throwError.call(this, 'replace must be a number', cb);\n      }\n\n      if (typeof autoGreyscale !== 'boolean') {\n        return _utils.throwError.call(this, 'autoGreyscale must be a boolean', cb);\n      }\n\n      max = this.constructor.limit255(max);\n      replace = this.constructor.limit255(replace);\n\n      if (autoGreyscale) {\n        this.greyscale();\n      }\n\n      this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, function (x, y, idx) {\n        var grey = _this.bitmap.data[idx] < max ? _this.bitmap.data[idx] : replace;\n        _this.bitmap.data[idx] = grey;\n        _this.bitmap.data[idx + 1] = grey;\n        _this.bitmap.data[idx + 2] = grey;\n      });\n\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n\n      return this;\n    }\n  };\n};\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["../src/index.js"],"names":["threshold","max","replace","autoGreyscale","throwError","grey","idx","cb"],"mappings":";;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AAEA;;;;;;;;;;;eASe,SAAA,QAAA,GAAA;EAAA,OAAO;IACpBA,SADoB,EAAA,SAAA,SAAA,CAAA,IAAA,EAAA,EAAA,EACwC;MAAA,IAAA,KAAA,GAAA,IAAA;;MAAA,IAAhDC,GAAgD,GAAA,IAAA,CAAhDA,GAAgD;MAAA,IAAA,YAAA,GAAA,IAAA,CAA3CC,OAA2C;MAAA,IAA3CA,OAA2C,GAAA,YAAA,KAAA,KAAA,CAAA,GAAjC,GAAiC,GAAA,YAAA;MAAA,IAAA,kBAAA,GAAA,IAAA,CAA5BC,aAA4B;MAAA,IAA5BA,aAA4B,GAAA,kBAAA,KAAA,KAAA,CAAA,GAAZ,IAAY,GAAA,kBAAA;;MAC1D,IAAI,OAAA,GAAA,KAAJ,QAAA,EAA6B;QAC3B,OAAOC,MAAAA,CAAAA,UAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,sBAAAA,EAAP,EAAOA,CAAP;MACD;;MAED,IAAI,OAAA,OAAA,KAAJ,QAAA,EAAiC;QAC/B,OAAOA,MAAAA,CAAAA,UAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,0BAAAA,EAAP,EAAOA,CAAP;MACD;;MAED,IAAI,OAAA,aAAA,KAAJ,SAAA,EAAwC;QACtC,OAAOA,MAAAA,CAAAA,UAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,iCAAAA,EAAP,EAAOA,CAAP;MACD;;MAEDH,GAAG,GAAG,KAAA,WAAA,CAAA,QAAA,CAANA,GAAM,CAANA;MACAC,OAAO,GAAG,KAAA,WAAA,CAAA,QAAA,CAAVA,OAAU,CAAVA;;MAEA,IAAA,aAAA,EAAmB;QACjB,KAAA,SAAA;MACD;;MAED,KAAA,SAAA,CAAA,CAAA,EAAA,CAAA,EAAqB,KAAA,MAAA,CAArB,KAAA,EAAwC,KAAA,MAAA,CAAxC,MAAA,EAA4D,UAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAe;QACzE,IAAMG,IAAI,GACR,KAAI,CAAJ,MAAA,CAAA,IAAA,CAAA,GAAA,IAAA,GAAA,GAA8B,KAAI,CAAJ,MAAA,CAAA,IAAA,CAA9B,GAA8B,CAA9B,GADF,OAAA;QAGA,KAAI,CAAJ,MAAA,CAAA,IAAA,CAAA,GAAA,IAAA,IAAA;QACA,KAAI,CAAJ,MAAA,CAAA,IAAA,CAAiBC,GAAG,GAApB,CAAA,IAAA,IAAA;QACA,KAAI,CAAJ,MAAA,CAAA,IAAA,CAAiBA,GAAG,GAApB,CAAA,IAAA,IAAA;MANF,CAAA;;MASA,IAAI,CAAA,GAAA,MAAA,CAAA,aAAA,EAAJ,EAAI,CAAJ,EAAuB;QACrBC,EAAE,CAAFA,IAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAAA,IAAAA;MACD;;MAED,OAAA,IAAA;IACD;EAnCmB,CAAP","sourcesContent":["import { isNodePattern, throwError } from '@jimp/utils';\n\n/**\n * Applies a minimum color threshold to a greyscale image.  Converts image to greyscale by default\n * @param {number} options object\n *  max: A number auto limited between 0 - 255\n *  replace: (optional) A number auto limited between 0 - 255 (default 255)\n *  autoGreyscale: (optional) A boolean whether to apply greyscale beforehand (default true)\n * @param {number} cb (optional) a callback for when complete\n * @return {this} this for chaining of methods\n */\nexport default () => ({\n  threshold({ max, replace = 255, autoGreyscale = true }, cb) {\n    if (typeof max !== 'number') {\n      return throwError.call(this, 'max must be a number', cb);\n    }\n\n    if (typeof replace !== 'number') {\n      return throwError.call(this, 'replace must be a number', cb);\n    }\n\n    if (typeof autoGreyscale !== 'boolean') {\n      return throwError.call(this, 'autoGreyscale must be a boolean', cb);\n    }\n\n    max = this.constructor.limit255(max);\n    replace = this.constructor.limit255(replace);\n\n    if (autoGreyscale) {\n      this.greyscale();\n    }\n\n    this.scanQuiet(0, 0, this.bitmap.width, this.bitmap.height, (x, y, idx) => {\n      const grey =\n        this.bitmap.data[idx] < max ? this.bitmap.data[idx] : replace;\n\n      this.bitmap.data[idx] = grey;\n      this.bitmap.data[idx + 1] = grey;\n      this.bitmap.data[idx + 2] = grey;\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n"]},"metadata":{},"sourceType":"script"}