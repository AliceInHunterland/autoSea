{"ast":null,"code":"import _objectSpread from\"/Users/ekaterinapavlova/PycharmProjects/onix/ffmpegwasm.github.io/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React from'react';import Grid from'@material-ui/core/Grid';import Typography from'@material-ui/core/Typography';import{makeStyles}from'@material-ui/core/styles';import Highlight,{defaultProps}from'prism-react-renderer';import vsDark from'prism-react-renderer/themes/vsDark';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var BROWSER_CODE=\"\\n<body>\\n  <video id=\\\"player\\\" controls></video>\\n  <input type=\\\"file\\\" id=\\\"uploader\\\">\\n  <script src=\\\"ffmpeg.min.js\\\"></script>\\n  <script>\\n    const { createFFmpeg, fetchFile } = FFmpeg;\\n    const ffmpeg = createFFmpeg({ log: true });\\n    const transcode = async ({ target: { files } }) => {\\n      const { name } = files[0];\\n      await ffmpeg.load();\\n      ffmpeg.FS('writeFile', name, await fetchFile(files[0]));\\n      await ffmpeg.run('-i', name,  'output.mp4');\\n      const data = ffmpeg.FS('readFile', 'output.mp4');\\n      const video = document.getElementById('player');\\n      video.src = URL.createObjectURL(new Blob([data.buffer], { type: 'video/mp4' }));\\n    }\\n    document\\n      .getElementById('uploader').addEventListener('change', transcode);\\n  </script>\\n</body>\\n\".trim('\\n');var NODE_CODE=\"\\nconst fs = require('fs');\\nconst { createFFmpeg, fetchFile } = require('@ffmpeg/ffmpeg');\\n\\nconst ffmpeg = createFFmpeg({ log: true });\\n\\n(async () => {\\n  await ffmpeg.load();\\n  ffmpeg.FS('writeFile', 'test.avi', await fetchFile('./test.avi'));\\n  await ffmpeg.run('-i', 'test.avi', 'test.mp4');\\n  await fs.promises.writeFile('./test.mp4', ffmpeg.FS('readFile', 'test.mp4'));\\n  process.exit(0);\\n})();\\n\".trim('\\n');var useStyles=makeStyles({root:{margin:'48px 0px 48px 0px'},para:{margin:'24px 0px 24px 0px'}});function ReadOnlyEditor(props){return/*#__PURE__*/_jsx(Highlight,_objectSpread(_objectSpread(_objectSpread({},defaultProps),{},{theme:vsDark},props),{},{children:function children(_ref){var tokens=_ref.tokens,getLineProps=_ref.getLineProps,getTokenProps=_ref.getTokenProps;return/*#__PURE__*/_jsx(\"pre\",{style:{fontSize:18},children:tokens.map(function(line,i){return/*#__PURE__*/_jsx(\"div\",_objectSpread(_objectSpread({},getLineProps({line:line,key:i})),{},{children:line.map(function(token,key){return/*#__PURE__*/_jsx(\"span\",_objectSpread({},getTokenProps({token:token,key:key})));})}));})});}}));}function Usage(){var classes=useStyles();return/*#__PURE__*/_jsxs(Grid,{className:classes.root,container:true,direction:\"column\",children:[/*#__PURE__*/_jsx(Typography,{align:\"center\",variant:\"h4\",children:\"Usage\"}),/*#__PURE__*/_jsx(Typography,{className:classes.para,align:\"center\",variant:\"h6\",children:\"With few lines of code you can use ffmpeg.wasm\"}),/*#__PURE__*/_jsx(Typography,{variant:\"h6\",children:\"Browser\"}),/*#__PURE__*/_jsx(ReadOnlyEditor,{language:\"html\",code:BROWSER_CODE}),/*#__PURE__*/_jsx(Typography,{variant:\"h6\",children:\"Node.JS\"}),/*#__PURE__*/_jsx(ReadOnlyEditor,{language:\"javascript\",code:NODE_CODE})]});}export default Usage;","map":{"version":3,"names":["React","Grid","Typography","makeStyles","Highlight","defaultProps","vsDark","BROWSER_CODE","trim","NODE_CODE","useStyles","root","margin","para","ReadOnlyEditor","props","tokens","getLineProps","getTokenProps","fontSize","map","line","i","key","token","Usage","classes"],"sources":["/Users/ekaterinapavlova/PycharmProjects/onix/ffmpegwasm.github.io/src/Usage.js"],"sourcesContent":["import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Highlight, { defaultProps } from 'prism-react-renderer';\nimport vsDark from 'prism-react-renderer/themes/vsDark';\n\nconst BROWSER_CODE=`\n<body>\n  <video id=\"player\" controls></video>\n  <input type=\"file\" id=\"uploader\">\n  <script src=\"ffmpeg.min.js\"></script>\n  <script>\n    const { createFFmpeg, fetchFile } = FFmpeg;\n    const ffmpeg = createFFmpeg({ log: true });\n    const transcode = async ({ target: { files } }) => {\n      const { name } = files[0];\n      await ffmpeg.load();\n      ffmpeg.FS('writeFile', name, await fetchFile(files[0]));\n      await ffmpeg.run('-i', name,  'output.mp4');\n      const data = ffmpeg.FS('readFile', 'output.mp4');\n      const video = document.getElementById('player');\n      video.src = URL.createObjectURL(new Blob([data.buffer], { type: 'video/mp4' }));\n    }\n    document\n      .getElementById('uploader').addEventListener('change', transcode);\n  </script>\n</body>\n`.trim('\\n');\n\nconst NODE_CODE=`\nconst fs = require('fs');\nconst { createFFmpeg, fetchFile } = require('@ffmpeg/ffmpeg');\n\nconst ffmpeg = createFFmpeg({ log: true });\n\n(async () => {\n  await ffmpeg.load();\n  ffmpeg.FS('writeFile', 'test.avi', await fetchFile('./test.avi'));\n  await ffmpeg.run('-i', 'test.avi', 'test.mp4');\n  await fs.promises.writeFile('./test.mp4', ffmpeg.FS('readFile', 'test.mp4'));\n  process.exit(0);\n})();\n`.trim('\\n');\n\nconst useStyles = makeStyles({\n  root: {\n    margin: '48px 0px 48px 0px',\n  },\n  para: {\n    margin: '24px 0px 24px 0px',\n  },\n});\n\nfunction ReadOnlyEditor(props) {\n  return (\n    <Highlight {...defaultProps} theme={vsDark} {...props}>\n      {({ tokens, getLineProps, getTokenProps }) => (\n        <pre style={{fontSize: 18}}>\n          {tokens.map((line, i) => (\n            <div {...getLineProps({ line, key: i })}>\n              {line.map((token, key) => (\n                <span {...getTokenProps({ token, key })} />\n              ))}\n            </div>\n          ))}\n        </pre>\n      )}\n    </Highlight>\n  );\n}\n\nfunction Usage() {\n  const classes = useStyles();\n  return (\n    <Grid className={classes.root} container direction=\"column\" >\n      <Typography align=\"center\" variant=\"h4\">\n        Usage\n      </Typography>\n      <Typography className={classes.para} align=\"center\" variant=\"h6\">\n        With few lines of code you can use ffmpeg.wasm\n      </Typography>\n      <Typography variant=\"h6\">\n        Browser\n      </Typography>\n      <ReadOnlyEditor\n        language=\"html\"\n        code={BROWSER_CODE}\n      />\n      <Typography variant=\"h6\">\n        Node.JS\n      </Typography>\n      <ReadOnlyEditor\n        language=\"javascript\"\n        code={NODE_CODE}\n      />\n    </Grid>\n  );\n}\n\nexport default Usage;\n"],"mappings":"sJAAA,MAAOA,MAAP,KAAkB,OAAlB,CACA,MAAOC,KAAP,KAAiB,wBAAjB,CACA,MAAOC,WAAP,KAAuB,8BAAvB,CACA,OAASC,UAAT,KAA2B,0BAA3B,CACA,MAAOC,UAAP,EAAoBC,YAApB,KAAwC,sBAAxC,CACA,MAAOC,OAAP,KAAmB,oCAAnB,C,wFAEA,GAAMC,aAAY,CAAC,myBAqBjBC,IArBiB,CAqBZ,IArBY,CAAnB,CAuBA,GAAMC,UAAS,CAAC,8ZAadD,IAbc,CAaT,IAbS,CAAhB,CAeA,GAAME,UAAS,CAAGP,UAAU,CAAC,CAC3BQ,IAAI,CAAE,CACJC,MAAM,CAAE,mBADJ,CADqB,CAI3BC,IAAI,CAAE,CACJD,MAAM,CAAE,mBADJ,CAJqB,CAAD,CAA5B,CASA,QAASE,eAAT,CAAwBC,KAAxB,CAA+B,CAC7B,mBACE,KAAC,SAAD,8CAAeV,YAAf,MAA6B,KAAK,CAAEC,MAApC,EAAgDS,KAAhD,eACG,2BAAGC,OAAH,MAAGA,MAAH,CAAWC,YAAX,MAAWA,YAAX,CAAyBC,aAAzB,MAAyBA,aAAzB,oBACC,YAAK,KAAK,CAAE,CAACC,QAAQ,CAAE,EAAX,CAAZ,UACGH,MAAM,CAACI,GAAP,CAAW,SAACC,IAAD,CAAOC,CAAP,qBACV,0CAASL,YAAY,CAAC,CAAEI,IAAI,CAAJA,IAAF,CAAQE,GAAG,CAAED,CAAb,CAAD,CAArB,eACGD,IAAI,CAACD,GAAL,CAAS,SAACI,KAAD,CAAQD,GAAR,qBACR,6BAAUL,aAAa,CAAC,CAAEM,KAAK,CAALA,KAAF,CAASD,GAAG,CAAHA,GAAT,CAAD,CAAvB,EADQ,EAAT,CADH,GADU,EAAX,CADH,EADD,EADH,GADF,CAeD,CAED,QAASE,MAAT,EAAiB,CACf,GAAMC,QAAO,CAAGhB,SAAS,EAAzB,CACA,mBACE,MAAC,IAAD,EAAM,SAAS,CAAEgB,OAAO,CAACf,IAAzB,CAA+B,SAAS,KAAxC,CAAyC,SAAS,CAAC,QAAnD,wBACE,KAAC,UAAD,EAAY,KAAK,CAAC,QAAlB,CAA2B,OAAO,CAAC,IAAnC,mBADF,cAIE,KAAC,UAAD,EAAY,SAAS,CAAEe,OAAO,CAACb,IAA/B,CAAqC,KAAK,CAAC,QAA3C,CAAoD,OAAO,CAAC,IAA5D,4DAJF,cAOE,KAAC,UAAD,EAAY,OAAO,CAAC,IAApB,qBAPF,cAUE,KAAC,cAAD,EACE,QAAQ,CAAC,MADX,CAEE,IAAI,CAAEN,YAFR,EAVF,cAcE,KAAC,UAAD,EAAY,OAAO,CAAC,IAApB,qBAdF,cAiBE,KAAC,cAAD,EACE,QAAQ,CAAC,YADX,CAEE,IAAI,CAAEE,SAFR,EAjBF,GADF,CAwBD,CAED,cAAegB,MAAf"},"metadata":{},"sourceType":"module"}