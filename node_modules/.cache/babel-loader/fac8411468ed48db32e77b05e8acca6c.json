{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = pluginCrop;\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _utils = require(\"@jimp/utils\");\n/* eslint-disable no-labels */\n\n\nfunction pluginCrop(event) {\n  /**\n   * Crops the image at a given point to a give size\n   * @param {number} x the x coordinate to crop form\n   * @param {number} y the y coordinate to crop form\n   * @param w the width of the crop region\n   * @param h the height of the crop region\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp} this for chaining of methods\n   */\n  event('crop', function (x, y, w, h, cb) {\n    if (typeof x !== 'number' || typeof y !== 'number') return _utils.throwError.call(this, 'x and y must be numbers', cb);\n    if (typeof w !== 'number' || typeof h !== 'number') return _utils.throwError.call(this, 'w and h must be numbers', cb); // round input\n\n    x = Math.round(x);\n    y = Math.round(y);\n    w = Math.round(w);\n    h = Math.round(h);\n\n    if (x === 0 && w === this.bitmap.width) {\n      // shortcut\n      var start = w * y + x << 2;\n      var end = start + h * w << 2;\n      this.bitmap.data = this.bitmap.data.slice(start, end);\n    } else {\n      var bitmap = Buffer.allocUnsafe(w * h * 4);\n      var offset = 0;\n      this.scanQuiet(x, y, w, h, function (x, y, idx) {\n        var data = this.bitmap.data.readUInt32BE(idx, true);\n        bitmap.writeUInt32BE(data, offset, true);\n        offset += 4;\n      });\n      this.bitmap.data = bitmap;\n    }\n\n    this.bitmap.width = w;\n    this.bitmap.height = h;\n\n    if ((0, _utils.isNodePattern)(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  });\n  return {\n    \"class\": {\n      /**\n       * Autocrop same color borders from this image\n       * @param {number} tolerance (optional): a percent value of tolerance for pixels color difference (default: 0.0002%)\n       * @param {boolean} cropOnlyFrames (optional): flag to crop only real frames: all 4 sides of the image must have some border (default: true)\n       * @param {function(Error, Jimp)} cb (optional): a callback for when complete (default: no callback)\n       * @returns {Jimp} this for chaining of methods\n       */\n      autocrop: function autocrop() {\n        var w = this.bitmap.width;\n        var h = this.bitmap.height;\n        var minPixelsPerSide = 1; // to avoid cropping completely the image, resulting in an invalid 0 sized image\n\n        var cb; // callback\n\n        var leaveBorder = 0; // Amount of pixels in border to leave\n\n        var tolerance = 0.0002; // percent of color difference tolerance (default value)\n\n        var cropOnlyFrames = true; // flag to force cropping only if the image has a real \"frame\"\n        // i.e. all 4 sides have some border (default value)\n\n        var cropSymmetric = false; // flag to force cropping top be symmetric.\n        // i.e. north and south / east and west are cropped by the same value\n\n        var ignoreSides = {\n          north: false,\n          south: false,\n          east: false,\n          west: false\n        }; // parse arguments\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        for (var a = 0, len = args.length; a < len; a++) {\n          if (typeof args[a] === 'number') {\n            // tolerance value passed\n            tolerance = args[a];\n          }\n\n          if (typeof args[a] === 'boolean') {\n            // cropOnlyFrames value passed\n            cropOnlyFrames = args[a];\n          }\n\n          if (typeof args[a] === 'function') {\n            // callback value passed\n            cb = args[a];\n          }\n\n          if ((0, _typeof2[\"default\"])(args[a]) === 'object') {\n            // config object passed\n            var config = args[a];\n\n            if (typeof config.tolerance !== 'undefined') {\n              tolerance = config.tolerance;\n            }\n\n            if (typeof config.cropOnlyFrames !== 'undefined') {\n              cropOnlyFrames = config.cropOnlyFrames;\n            }\n\n            if (typeof config.cropSymmetric !== 'undefined') {\n              cropSymmetric = config.cropSymmetric;\n            }\n\n            if (typeof config.leaveBorder !== 'undefined') {\n              leaveBorder = config.leaveBorder;\n            }\n\n            if (typeof config.ignoreSides !== 'undefined') {\n              ignoreSides = config.ignoreSides;\n            }\n          }\n        }\n        /**\n         * All borders must be of the same color as the top left pixel, to be cropped.\n         * It should be possible to crop borders each with a different color,\n         * but since there are many ways for corners to intersect, it would\n         * introduce unnecessary complexity to the algorithm.\n         */\n        // scan each side for same color borders\n\n\n        var colorTarget = this.getPixelColor(0, 0); // top left pixel color is the target color\n\n        var rgba1 = this.constructor.intToRGBA(colorTarget); // for north and east sides\n\n        var northPixelsToCrop = 0;\n        var eastPixelsToCrop = 0;\n        var southPixelsToCrop = 0;\n        var westPixelsToCrop = 0; // north side (scan rows from north to south)\n\n        colorTarget = this.getPixelColor(0, 0);\n\n        if (!ignoreSides.north) {\n          north: for (var y = 0; y < h - minPixelsPerSide; y++) {\n            for (var x = 0; x < w; x++) {\n              var colorXY = this.getPixelColor(x, y);\n              var rgba2 = this.constructor.intToRGBA(colorXY);\n\n              if (this.constructor.colorDiff(rgba1, rgba2) > tolerance) {\n                // this pixel is too distant from the first one: abort this side scan\n                break north;\n              }\n            } // this row contains all pixels with the same color: increment this side pixels to crop\n\n\n            northPixelsToCrop++;\n          }\n        } // east side (scan columns from east to west)\n\n\n        colorTarget = this.getPixelColor(w, 0);\n\n        if (!ignoreSides.east) {\n          east: for (var _x = 0; _x < w - minPixelsPerSide; _x++) {\n            for (var _y = 0 + northPixelsToCrop; _y < h; _y++) {\n              var _colorXY = this.getPixelColor(_x, _y);\n\n              var _rgba = this.constructor.intToRGBA(_colorXY);\n\n              if (this.constructor.colorDiff(rgba1, _rgba) > tolerance) {\n                // this pixel is too distant from the first one: abort this side scan\n                break east;\n              }\n            } // this column contains all pixels with the same color: increment this side pixels to crop\n\n\n            eastPixelsToCrop++;\n          }\n        } // south side (scan rows from south to north)\n\n\n        colorTarget = this.getPixelColor(0, h);\n\n        if (!ignoreSides.south) {\n          south: for (var _y2 = h - 1; _y2 >= northPixelsToCrop + minPixelsPerSide; _y2--) {\n            for (var _x2 = w - eastPixelsToCrop - 1; _x2 >= 0; _x2--) {\n              var _colorXY2 = this.getPixelColor(_x2, _y2);\n\n              var _rgba2 = this.constructor.intToRGBA(_colorXY2);\n\n              if (this.constructor.colorDiff(rgba1, _rgba2) > tolerance) {\n                // this pixel is too distant from the first one: abort this side scan\n                break south;\n              }\n            } // this row contains all pixels with the same color: increment this side pixels to crop\n\n\n            southPixelsToCrop++;\n          }\n        } // west side (scan columns from west to east)\n\n\n        colorTarget = this.getPixelColor(w, h);\n\n        if (!ignoreSides.west) {\n          west: for (var _x3 = w - 1; _x3 >= 0 + eastPixelsToCrop + minPixelsPerSide; _x3--) {\n            for (var _y3 = h - 1; _y3 >= 0 + northPixelsToCrop; _y3--) {\n              var _colorXY3 = this.getPixelColor(_x3, _y3);\n\n              var _rgba3 = this.constructor.intToRGBA(_colorXY3);\n\n              if (this.constructor.colorDiff(rgba1, _rgba3) > tolerance) {\n                // this pixel is too distant from the first one: abort this side scan\n                break west;\n              }\n            } // this column contains all pixels with the same color: increment this side pixels to crop\n\n\n            westPixelsToCrop++;\n          }\n        } // decide if a crop is needed\n\n\n        var doCrop = false; // apply leaveBorder\n\n        westPixelsToCrop -= leaveBorder;\n        eastPixelsToCrop -= leaveBorder;\n        northPixelsToCrop -= leaveBorder;\n        southPixelsToCrop -= leaveBorder;\n\n        if (cropSymmetric) {\n          var horizontal = Math.min(eastPixelsToCrop, westPixelsToCrop);\n          var vertical = Math.min(northPixelsToCrop, southPixelsToCrop);\n          westPixelsToCrop = horizontal;\n          eastPixelsToCrop = horizontal;\n          northPixelsToCrop = vertical;\n          southPixelsToCrop = vertical;\n        } // make sure that crops are >= 0\n\n\n        westPixelsToCrop = westPixelsToCrop >= 0 ? westPixelsToCrop : 0;\n        eastPixelsToCrop = eastPixelsToCrop >= 0 ? eastPixelsToCrop : 0;\n        northPixelsToCrop = northPixelsToCrop >= 0 ? northPixelsToCrop : 0;\n        southPixelsToCrop = southPixelsToCrop >= 0 ? southPixelsToCrop : 0; // safety checks\n\n        var widthOfRemainingPixels = w - (westPixelsToCrop + eastPixelsToCrop);\n        var heightOfRemainingPixels = h - (southPixelsToCrop + northPixelsToCrop);\n\n        if (cropOnlyFrames) {\n          // crop image if all sides should be cropped\n          doCrop = eastPixelsToCrop !== 0 && northPixelsToCrop !== 0 && westPixelsToCrop !== 0 && southPixelsToCrop !== 0;\n        } else {\n          // crop image if at least one side should be cropped\n          doCrop = eastPixelsToCrop !== 0 || northPixelsToCrop !== 0 || westPixelsToCrop !== 0 || southPixelsToCrop !== 0;\n        }\n\n        if (doCrop) {\n          // do the real crop\n          this.crop(eastPixelsToCrop, northPixelsToCrop, widthOfRemainingPixels, heightOfRemainingPixels);\n        }\n\n        if ((0, _utils.isNodePattern)(cb)) {\n          cb.call(this, null, this);\n        }\n\n        return this;\n      }\n    }\n  };\n}","map":{"version":3,"sources":["../src/index.js"],"names":["event","throwError","x","Math","y","w","h","start","end","bitmap","Buffer","offset","data","cb","autocrop","args","minPixelsPerSide","leaveBorder","tolerance","cropOnlyFrames","cropSymmetric","ignoreSides","north","south","east","west","a","len","config","colorTarget","rgba1","northPixelsToCrop","eastPixelsToCrop","southPixelsToCrop","westPixelsToCrop","colorXY","rgba2","doCrop","horizontal","vertical","widthOfRemainingPixels","heightOfRemainingPixels"],"mappings":"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","sourcesContent":["/* eslint-disable no-labels */\n\nimport { throwError, isNodePattern } from '@jimp/utils';\n\nexport default function pluginCrop(event) {\n  /**\n   * Crops the image at a given point to a give size\n   * @param {number} x the x coordinate to crop form\n   * @param {number} y the y coordinate to crop form\n   * @param w the width of the crop region\n   * @param h the height of the crop region\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp} this for chaining of methods\n   */\n  event('crop', function(x, y, w, h, cb) {\n    if (typeof x !== 'number' || typeof y !== 'number')\n      return throwError.call(this, 'x and y must be numbers', cb);\n    if (typeof w !== 'number' || typeof h !== 'number')\n      return throwError.call(this, 'w and h must be numbers', cb);\n\n    // round input\n    x = Math.round(x);\n    y = Math.round(y);\n    w = Math.round(w);\n    h = Math.round(h);\n\n    if (x === 0 && w === this.bitmap.width) {\n      // shortcut\n      const start = (w * y + x) << 2;\n      const end = (start + h * w) << 2;\n\n      this.bitmap.data = this.bitmap.data.slice(start, end);\n    } else {\n      const bitmap = Buffer.allocUnsafe(w * h * 4);\n      let offset = 0;\n\n      this.scanQuiet(x, y, w, h, function(x, y, idx) {\n        const data = this.bitmap.data.readUInt32BE(idx, true);\n        bitmap.writeUInt32BE(data, offset, true);\n        offset += 4;\n      });\n\n      this.bitmap.data = bitmap;\n    }\n\n    this.bitmap.width = w;\n    this.bitmap.height = h;\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  });\n\n  return {\n    class: {\n      /**\n       * Autocrop same color borders from this image\n       * @param {number} tolerance (optional): a percent value of tolerance for pixels color difference (default: 0.0002%)\n       * @param {boolean} cropOnlyFrames (optional): flag to crop only real frames: all 4 sides of the image must have some border (default: true)\n       * @param {function(Error, Jimp)} cb (optional): a callback for when complete (default: no callback)\n       * @returns {Jimp} this for chaining of methods\n       */\n      autocrop(...args) {\n        const w = this.bitmap.width;\n        const h = this.bitmap.height;\n        const minPixelsPerSide = 1; // to avoid cropping completely the image, resulting in an invalid 0 sized image\n\n        let cb; // callback\n        let leaveBorder = 0; // Amount of pixels in border to leave\n        let tolerance = 0.0002; // percent of color difference tolerance (default value)\n        let cropOnlyFrames = true; // flag to force cropping only if the image has a real \"frame\"\n        // i.e. all 4 sides have some border (default value)\n        let cropSymmetric = false; // flag to force cropping top be symmetric.\n        // i.e. north and south / east and west are cropped by the same value\n        let ignoreSides = {\n          north: false,\n          south: false,\n          east: false,\n          west: false\n        };\n\n        // parse arguments\n        for (let a = 0, len = args.length; a < len; a++) {\n          if (typeof args[a] === 'number') {\n            // tolerance value passed\n            tolerance = args[a];\n          }\n\n          if (typeof args[a] === 'boolean') {\n            // cropOnlyFrames value passed\n            cropOnlyFrames = args[a];\n          }\n\n          if (typeof args[a] === 'function') {\n            // callback value passed\n            cb = args[a];\n          }\n\n          if (typeof args[a] === 'object') {\n            // config object passed\n            const config = args[a];\n\n            if (typeof config.tolerance !== 'undefined') {\n              ({ tolerance } = config);\n            }\n\n            if (typeof config.cropOnlyFrames !== 'undefined') {\n              ({ cropOnlyFrames } = config);\n            }\n\n            if (typeof config.cropSymmetric !== 'undefined') {\n              ({ cropSymmetric } = config);\n            }\n\n            if (typeof config.leaveBorder !== 'undefined') {\n              ({ leaveBorder } = config);\n            }\n\n            if (typeof config.ignoreSides !== 'undefined') {\n              ({ ignoreSides } = config);\n            }\n          }\n        }\n\n        /**\n         * All borders must be of the same color as the top left pixel, to be cropped.\n         * It should be possible to crop borders each with a different color,\n         * but since there are many ways for corners to intersect, it would\n         * introduce unnecessary complexity to the algorithm.\n         */\n\n        // scan each side for same color borders\n        let colorTarget = this.getPixelColor(0, 0); // top left pixel color is the target color\n        const rgba1 = this.constructor.intToRGBA(colorTarget);\n\n        // for north and east sides\n        let northPixelsToCrop = 0;\n        let eastPixelsToCrop = 0;\n        let southPixelsToCrop = 0;\n        let westPixelsToCrop = 0;\n\n        // north side (scan rows from north to south)\n        colorTarget = this.getPixelColor(0, 0);\n        if (!ignoreSides.north) {\n          north: for (let y = 0; y < h - minPixelsPerSide; y++) {\n            for (let x = 0; x < w; x++) {\n              const colorXY = this.getPixelColor(x, y);\n              const rgba2 = this.constructor.intToRGBA(colorXY);\n\n              if (this.constructor.colorDiff(rgba1, rgba2) > tolerance) {\n                // this pixel is too distant from the first one: abort this side scan\n                break north;\n              }\n            }\n\n            // this row contains all pixels with the same color: increment this side pixels to crop\n            northPixelsToCrop++;\n          }\n        }\n\n        // east side (scan columns from east to west)\n        colorTarget = this.getPixelColor(w, 0);\n        if (!ignoreSides.east) {\n          east: for (let x = 0; x < w - minPixelsPerSide; x++) {\n            for (let y = 0 + northPixelsToCrop; y < h; y++) {\n              const colorXY = this.getPixelColor(x, y);\n              const rgba2 = this.constructor.intToRGBA(colorXY);\n\n              if (this.constructor.colorDiff(rgba1, rgba2) > tolerance) {\n                // this pixel is too distant from the first one: abort this side scan\n                break east;\n              }\n            }\n\n            // this column contains all pixels with the same color: increment this side pixels to crop\n            eastPixelsToCrop++;\n          }\n        }\n\n        // south side (scan rows from south to north)\n        colorTarget = this.getPixelColor(0, h);\n\n        if (!ignoreSides.south) {\n          south: for (\n            let y = h - 1;\n            y >= northPixelsToCrop + minPixelsPerSide;\n            y--\n          ) {\n            for (let x = w - eastPixelsToCrop - 1; x >= 0; x--) {\n              const colorXY = this.getPixelColor(x, y);\n              const rgba2 = this.constructor.intToRGBA(colorXY);\n\n              if (this.constructor.colorDiff(rgba1, rgba2) > tolerance) {\n                // this pixel is too distant from the first one: abort this side scan\n                break south;\n              }\n            }\n\n            // this row contains all pixels with the same color: increment this side pixels to crop\n            southPixelsToCrop++;\n          }\n        }\n\n        // west side (scan columns from west to east)\n        colorTarget = this.getPixelColor(w, h);\n        if (!ignoreSides.west) {\n          west: for (\n            let x = w - 1;\n            x >= 0 + eastPixelsToCrop + minPixelsPerSide;\n            x--\n          ) {\n            for (let y = h - 1; y >= 0 + northPixelsToCrop; y--) {\n              const colorXY = this.getPixelColor(x, y);\n              const rgba2 = this.constructor.intToRGBA(colorXY);\n\n              if (this.constructor.colorDiff(rgba1, rgba2) > tolerance) {\n                // this pixel is too distant from the first one: abort this side scan\n                break west;\n              }\n            }\n\n            // this column contains all pixels with the same color: increment this side pixels to crop\n            westPixelsToCrop++;\n          }\n        }\n\n        // decide if a crop is needed\n        let doCrop = false;\n\n        // apply leaveBorder\n        westPixelsToCrop -= leaveBorder;\n        eastPixelsToCrop -= leaveBorder;\n        northPixelsToCrop -= leaveBorder;\n        southPixelsToCrop -= leaveBorder;\n\n        if (cropSymmetric) {\n          const horizontal = Math.min(eastPixelsToCrop, westPixelsToCrop);\n          const vertical = Math.min(northPixelsToCrop, southPixelsToCrop);\n          westPixelsToCrop = horizontal;\n          eastPixelsToCrop = horizontal;\n          northPixelsToCrop = vertical;\n          southPixelsToCrop = vertical;\n        }\n\n        // make sure that crops are >= 0\n        westPixelsToCrop = westPixelsToCrop >= 0 ? westPixelsToCrop : 0;\n        eastPixelsToCrop = eastPixelsToCrop >= 0 ? eastPixelsToCrop : 0;\n        northPixelsToCrop = northPixelsToCrop >= 0 ? northPixelsToCrop : 0;\n        southPixelsToCrop = southPixelsToCrop >= 0 ? southPixelsToCrop : 0;\n\n        // safety checks\n        const widthOfRemainingPixels =\n          w - (westPixelsToCrop + eastPixelsToCrop);\n        const heightOfRemainingPixels =\n          h - (southPixelsToCrop + northPixelsToCrop);\n\n        if (cropOnlyFrames) {\n          // crop image if all sides should be cropped\n          doCrop =\n            eastPixelsToCrop !== 0 &&\n            northPixelsToCrop !== 0 &&\n            westPixelsToCrop !== 0 &&\n            southPixelsToCrop !== 0;\n        } else {\n          // crop image if at least one side should be cropped\n          doCrop =\n            eastPixelsToCrop !== 0 ||\n            northPixelsToCrop !== 0 ||\n            westPixelsToCrop !== 0 ||\n            southPixelsToCrop !== 0;\n        }\n\n        if (doCrop) {\n          // do the real crop\n          this.crop(\n            eastPixelsToCrop,\n            northPixelsToCrop,\n            widthOfRemainingPixels,\n            heightOfRemainingPixels\n          );\n        }\n\n        if (isNodePattern(cb)) {\n          cb.call(this, null, this);\n        }\n\n        return this;\n      }\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"script"}