{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _utils = require(\"@jimp/utils\");\n/**\n * Creates a circle out of an image.\n * @param {function(Error, Jimp)} options (optional)\n * opacity - opacity of the shadow between 0 and 1\n * size,- of the shadow\n * blur - how blurry the shadow is\n * x- x position of shadow\n * y - y position of shadow\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\n\n\nvar _default = function _default() {\n  return {\n    shadow: function shadow() {\n      var _this = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var cb = arguments.length > 1 ? arguments[1] : undefined;\n\n      if (typeof options === 'function') {\n        cb = options;\n        options = {};\n      }\n\n      var _options = options,\n          _options$opacity = _options.opacity,\n          opacity = _options$opacity === void 0 ? 0.7 : _options$opacity,\n          _options$size = _options.size,\n          size = _options$size === void 0 ? 1.1 : _options$size,\n          _options$x = _options.x,\n          x = _options$x === void 0 ? -25 : _options$x,\n          _options$y = _options.y,\n          y = _options$y === void 0 ? 25 : _options$y,\n          _options$blur = _options.blur,\n          blur = _options$blur === void 0 ? 5 : _options$blur; // clone the image\n\n      var orig = this.clone();\n      var shadow = this.clone(); // turn all it's pixels black\n\n      shadow.scan(0, 0, shadow.bitmap.width, shadow.bitmap.height, function (x, y, idx) {\n        shadow.bitmap.data[idx] = 0x00;\n        shadow.bitmap.data[idx + 1] = 0x00;\n        shadow.bitmap.data[idx + 2] = 0x00; // up the opacity a little,\n\n        shadow.bitmap.data[idx + 3] = shadow.constructor.limit255(shadow.bitmap.data[idx + 3] * opacity);\n        _this.bitmap.data[idx] = 0x00;\n        _this.bitmap.data[idx + 1] = 0x00;\n        _this.bitmap.data[idx + 2] = 0x00;\n        _this.bitmap.data[idx + 3] = 0x00;\n      }); // enlarge it. This creates a \"shadow\".\n\n      shadow.resize(shadow.bitmap.width * size, shadow.bitmap.height * size).blur(blur); // Then blit the \"shadow\" onto the background and the image on top of that.\n\n      this.composite(shadow, x, y);\n      this.composite(orig, 0, 0);\n\n      if ((0, _utils.isNodePattern)(cb)) {\n        cb.call(this, null, this);\n      }\n\n      return this;\n    }\n  };\n};\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["../src/index.js"],"names":["shadow","options","cb","opacity","size","x","y","blur","orig","idx"],"mappings":"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","sourcesContent":["import { isNodePattern } from '@jimp/utils';\n\n/**\n * Creates a circle out of an image.\n * @param {function(Error, Jimp)} options (optional)\n * opacity - opacity of the shadow between 0 and 1\n * size,- of the shadow\n * blur - how blurry the shadow is\n * x- x position of shadow\n * y - y position of shadow\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  shadow(options = {}, cb) {\n    if (typeof options === 'function') {\n      cb = options;\n      options = {};\n    }\n\n    const { opacity = 0.7, size = 1.1, x = -25, y = 25, blur = 5 } = options;\n\n    // clone the image\n    const orig = this.clone();\n    const shadow = this.clone();\n\n    // turn all it's pixels black\n    shadow.scan(\n      0,\n      0,\n      shadow.bitmap.width,\n      shadow.bitmap.height,\n      (x, y, idx) => {\n        shadow.bitmap.data[idx] = 0x00;\n        shadow.bitmap.data[idx + 1] = 0x00;\n        shadow.bitmap.data[idx + 2] = 0x00;\n        // up the opacity a little,\n        shadow.bitmap.data[idx + 3] = shadow.constructor.limit255(\n          shadow.bitmap.data[idx + 3] * opacity\n        );\n\n        this.bitmap.data[idx] = 0x00;\n        this.bitmap.data[idx + 1] = 0x00;\n        this.bitmap.data[idx + 2] = 0x00;\n        this.bitmap.data[idx + 3] = 0x00;\n      }\n    );\n\n    // enlarge it. This creates a \"shadow\".\n    shadow\n      .resize(shadow.bitmap.width * size, shadow.bitmap.height * size)\n      .blur(blur);\n\n    // Then blit the \"shadow\" onto the background and the image on top of that.\n    this.composite(shadow, x, y);\n    this.composite(orig, 0, 0);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n"]},"metadata":{},"sourceType":"script"}